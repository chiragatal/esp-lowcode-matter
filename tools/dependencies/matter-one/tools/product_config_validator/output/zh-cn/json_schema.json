{
    "$defs": {
        "ADCCfgButton": {
            "additionalProperties": false,
            "description": "Configuration for ADC button, applicable if `ezc.driver.gpio` is selected",
            "example": [
                "{\"adc_config\": {\"adc_channel\": 0,\"button_index\": 1,\"min\": 100,\"max\": 500,\"long_press_time\": 5}}"
            ],
            "properties": {
                "adc_channel": {
                    "default": 5,
                    "description": "Input ADC for the driver. Range of values depend on the chip",
                    "maximum": 32,
                    "minimum": 0,
                    "title": "ADC Channel",
                    "type": "integer"
                },
                "button_index": {
                    "default": 5,
                    "description": "button index on the channel",
                    "maximum": 32,
                    "minimum": 0,
                    "title": "Button Index",
                    "type": "integer"
                },
                "min": {
                    "default": 5,
                    "description": "min voltage in mv corresponding to the button",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "Min Voltage",
                    "type": "integer"
                },
                "max": {
                    "default": 5,
                    "description": "max voltage in mv corresponding to the button",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "Max Voltage",
                    "type": "integer"
                },
                "long_press_time": {
                    "default": 5,
                    "description": "Time in seconds for long press event to be detected.",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "Long Press Time",
                    "type": "integer"
                }
            },
            "title": "Button Driver: ADC Configurations",
            "type": "object"
        },
        "AdvertiseMac": {
            "additionalProperties": false,
            "description": "The device advertises its MAC address over BLE. This can be triggered by some user action like power cycling the device x number of times. This can be useful in cases where the QR code of the device needs to be shared with an end user, in case they are unable to find it again.",
            "example": [
                "{\"type\": \"ezc.product_common.advertise_mac\", \"subtype\": 1, \"count\": 3}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.advertise_mac",
                    "description": "Product Common type: ezc.product_common.advertise_mac",
                    "enum": [
                        "ezc.product_common.advertise_mac"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 1,
                    "description": "Advertise MAC type: 1",
                    "enum": [
                        1
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "count": {
                    "description": "Number of times the device needs to be power cycled",
                    "exclusiveMinimum": 0,
                    "title": "Count",
                    "type": "integer"
                }
            },
            "required": [
                "type",
                "subtype",
                "count"
            ],
            "section": "Product Common",
            "title": "Advertise MAC",
            "type": "object"
        },
        "BP1658CJCfg": {
            "additionalProperties": false,
            "description": "Applicable if `bp1658cj is selected",
            "example": [
                "{\"bp1658cj_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 50}}"
            ],
            "properties": {
                "gpio_clock": {
                    "description": "IIC clock signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC clock signal pin",
                    "type": "integer"
                },
                "gpio_sda": {
                    "description": "IIC data signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC data signal pin",
                    "type": "integer"
                },
                "iic_khz": {
                    "description": "IIC signal frequency in KHz",
                    "exclusiveMinimum": 0,
                    "title": "IIC Frequency",
                    "type": "integer"
                },
                "out_red": {
                    "description": "Red light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Red light output pin",
                    "type": "integer"
                },
                "out_green": {
                    "description": "Green light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Green light output pin",
                    "type": "integer"
                },
                "out_blue": {
                    "description": "Blue light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Blue light output pin",
                    "type": "integer"
                },
                "out_cold": {
                    "description": "Cold white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Cold white light output pin",
                    "type": "integer"
                },
                "out_warm": {
                    "description": "Warm white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Warm white light output pin",
                    "type": "integer"
                },
                "white_current_max": {
                    "description": "Maximum white light current in mA",
                    "maximum": 75,
                    "minimum": 0,
                    "multipleOf": 5,
                    "title": "White Current Max",
                    "type": "integer"
                },
                "rgb_current_max": {
                    "description": "Maximum current of color light in mA",
                    "maximum": 150,
                    "minimum": 0,
                    "multipleOf": 10,
                    "title": "RGB Current Max",
                    "type": "integer"
                }
            },
            "required": [
                "gpio_clock",
                "gpio_sda",
                "iic_khz",
                "out_red",
                "out_green",
                "out_blue",
                "out_cold",
                "out_warm",
                "white_current_max",
                "rgb_current_max"
            ],
            "title": "Light Driver: BP1658CJ Light Driver: Configurations",
            "type": "object"
        },
        "BP5758DCfg": {
            "additionalProperties": false,
            "description": "Applicable if bp5758d is selected",
            "example": [
                "{\"bp5758d_config\": {\"gpio_clock\": 10, \"gpio_sda\": 4, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_warm\": 3, \"out_cold\": 4, \"out1_current_max\": 6, \"out2_current_max\": 6, \"out3_current_max\": 6, \"out4_current_max\": 13, \"out5_current_max\": 13}}"
            ],
            "properties": {
                "gpio_clock": {
                    "description": "IIC clock signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC clock signal pin",
                    "type": "integer"
                },
                "gpio_sda": {
                    "description": "IIC data signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC data signal pin",
                    "type": "integer"
                },
                "iic_khz": {
                    "description": "IIC signal frequency in KHz",
                    "exclusiveMinimum": 0,
                    "title": "IIC Frequency",
                    "type": "integer"
                },
                "out_red": {
                    "description": "Red light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Red light output pin",
                    "type": "integer"
                },
                "out_green": {
                    "description": "Green light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Green light output pin",
                    "type": "integer"
                },
                "out_blue": {
                    "description": "Blue light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Blue light output pin",
                    "type": "integer"
                },
                "out_cold": {
                    "description": "Cold white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Cold white light output pin",
                    "type": "integer"
                },
                "out_warm": {
                    "description": "Warm white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Warm white light output pin",
                    "type": "integer"
                },
                "out1_current_max": {
                    "description": "Maximum #1 channel current in mA",
                    "exclusiveMinimum": 0,
                    "maximum": 90,
                    "title": "Channel 1 Current Max",
                    "type": "integer"
                },
                "out2_current_max": {
                    "description": "Maximum #2 channel current in mA",
                    "exclusiveMinimum": 0,
                    "maximum": 90,
                    "title": "Channel 2 Current Max",
                    "type": "integer"
                },
                "out3_current_max": {
                    "description": "Maximum #3 channel current in mA",
                    "exclusiveMinimum": 0,
                    "maximum": 90,
                    "title": "Channel 3 Current Max",
                    "type": "integer"
                },
                "out4_current_max": {
                    "description": "Maximum #4 channel current in mA",
                    "exclusiveMinimum": 0,
                    "maximum": 90,
                    "title": "Channel 4 Current Max",
                    "type": "integer"
                },
                "out5_current_max": {
                    "exclusiveMinimum": 0,
                    "maximum": 90,
                    "title": "Out5 Current Max",
                    "type": "integer"
                }
            },
            "required": [
                "gpio_clock",
                "gpio_sda",
                "iic_khz",
                "out_red",
                "out_green",
                "out_blue",
                "out_cold",
                "out_warm",
                "out1_current_max",
                "out2_current_max",
                "out3_current_max",
                "out4_current_max",
                "out5_current_max"
            ],
            "title": "Light Driver: BP5758D Light Driver: Configurations",
            "type": "object"
        },
        "BackLight": {
            "additionalProperties": false,
            "description": "Background light which can be turned on and off for devices with a small screen.",
            "example": [
                "{\"type\": \"ezc.product_common.back_light\", \"power_bootup\": 0, \"driver\": {\"input\": 1011, \"input_trigger_type\": 1, \"indicator\": 1008}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.back_light",
                    "description": "Product Common type: ezc.product_common.back_light",
                    "enum": [
                        "ezc.product_common.back_light"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "power_bootup": {
                    "default": 1,
                    "description": "Power state of the back light when the device boots up:\n\u2022 `0`: Always Off\n\u2022 `1`: Always On\n\u2022 `-1`: Previous value\n",
                    "maximum": 1,
                    "minimum": -1,
                    "title": "Power Bootup",
                    "type": "integer"
                },
                "driver": {
                    "$ref": "#/$defs/product_common__product_common__BackLight__Driver",
                    "description": "Driver details for back light.",
                    "title": "Back Light: Driver Configurations"
                }
            },
            "required": [
                "type",
                "driver"
            ],
            "section": "Product Common",
            "title": "Back Light",
            "type": "object"
        },
        "ButtonADCDriver": {
            "additionalProperties": false,
            "description": "Applicable if ADC is selected as Button Driver",
            "example": [
                "{\"id\": 1000,\"type\": \"ezc.driver.button\",\"name\": \"adc\", \"adc_config\": {\"gpio_num\": 9,\"active_level\": 0,\"long_press_time\": 5}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.button",
                    "description": "Driver: ezc.driver.button",
                    "enum": [
                        "ezc.driver.button"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "adc",
                    "description": "Button subtype: ADC",
                    "enum": [
                        "adc"
                    ],
                    "title": "Button name",
                    "type": "string"
                },
                "adc_config": {
                    "$ref": "#/$defs/ADCCfgButton"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "adc_config"
            ],
            "section": "Driver",
            "title": "Button Driver: ADC Driver",
            "type": "object"
        },
        "ButtonGPIODriver": {
            "additionalProperties": false,
            "description": "Applicable if GPIO is selected as Button Driver",
            "example": [
                "{\"id\": 1000,\"type\": \"ezc.driver.button\",\"name\": \"gpio\", \"gpio_config\": {\"gpio_num\": 9,\"active_level\": 0,\"long_press_time\": 5}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.button",
                    "description": "Driver: ezc.driver.button",
                    "enum": [
                        "ezc.driver.button"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "gpio",
                    "description": "Button subtype: GPIO",
                    "enum": [
                        "gpio"
                    ],
                    "title": "Button name",
                    "type": "string"
                },
                "gpio_config": {
                    "$ref": "#/$defs/GPIOCfgButton"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "gpio_config"
            ],
            "section": "Driver",
            "title": "Button Driver: GPIO Driver",
            "type": "object"
        },
        "ButtonHostedDriver": {
            "additionalProperties": false,
            "description": "UART based button driver",
            "example": [
                "{\"id\": 1000,\"type\": \"ezc.driver.button\",\"name\": \"hosted\", \"hosted_config\": {\"uart_driver_id\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.button",
                    "description": "Driver: ezc.driver.button",
                    "enum": [
                        "ezc.driver.button"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "hosted",
                    "description": "`hosted` applicable only if hosted driver is selected",
                    "enum": [
                        "hosted"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "hosted_config": {
                    "$ref": "#/$defs/HostedCfgButton"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "hosted_config"
            ],
            "section": "Driver",
            "title": "Button Driver: Hosted Driver",
            "type": "object"
        },
        "CctMapCfg": {
            "additionalProperties": false,
            "description": "CCT Map configurations for light bulb. Applicable for light with precise cct control enable\nMap data format is as follows:\n\t[[cct_kelvin, cct_percentage, coef_red, coef_green, coef_blue, coef_cold, coef_warm], ...]",
            "example": [
                "{\"cct_map\": { \"table\": \"[[2200, 0, 0.033, 0.033, 0.034, 0.45, 0.45],[7000, 100, 0.033, 0.033, 0.034, 0.45, 0.45]]\"}}"
            ],
            "properties": {
                "table": {
                    "description": "CCT Map Table\n\u2022 cct: Color temperature in kelvin\n\u2022 cct_percentage: Percentage of color temperature\n\u2022 red: Red light output\n\u2022 green: Green light output\n\u2022 blue: Blue light output\n\u2022 cold: Cold white light output\n\u2022 warm: Warm white light output\n",
                    "title": "CCT Map Table",
                    "type": "string"
                }
            },
            "required": [
                "table"
            ],
            "title": "Light Driver: CCT Map Configurations",
            "type": "object"
        },
        "ColorMapCfg": {
            "additionalProperties": false,
            "description": "Color Map configurations for light bulb. Applicable for light with precise color control enable\nMap data format is as follows:\n\t[[hue, saturation_100_red, saturation_100_green, saturation_100_blue, saturation_100_cold, saturation_100_warm, saturation_50_red, saturation_50_green, saturation_50_blue, saturation_50_cold, saturation_50_warm, saturation_0_red, saturation_0_green, saturation_0_blue, saturation_0_cold, saturation_0_warm], ...]",
            "example": [
                "{\"color_map\":{\"table\":\"[[0,1,0,0,0,0,0.9120,0.0440,0.0440,0,0,0.4854,0.2573,0.2573,0,0],[15,0.9218,0.0782,0,0,0,0.8549,0.0907,0.0544,0,0,0.5112,0.2639,0.2248,0,0]]\"}}"
            ],
            "properties": {
                "table": {
                    "description": "Color Map Table. Add at least 12 sets of color data",
                    "title": "Color Map Table",
                    "type": "string"
                }
            },
            "required": [
                "table"
            ],
            "title": "Light Driver: Color Map Configurations",
            "type": "object"
        },
        "Config": {
            "additionalProperties": false,
            "description": "Window covering related common configurations",
            "example": [
                "{\"window_covering_config\": {\"set_defaults_when_poweron\": true, \"indicator_off_end\": true, \"stop_indicator_off_delay_time_ms\": 1000, \"update_driver\": true}}"
            ],
            "properties": {
                "update_driver": {
                    "default": true,
                    "description": "Set to false if the driver is already updated and does not need to be updated again. This is useful in 2 chip solutions, where the window covering level is changed as soon as the button is pressed on the Host MCU before sending the command to the Espressif module.",
                    "title": "Update Driver",
                    "type": "boolean"
                },
                "set_defaults_when_poweron": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Set to True if the device should go to default position when powered on.",
                    "title": "Whether to set defaults value at power on"
                },
                "indicator_off_end": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Whether the indicator light should turn off when the window covering is at the end.",
                    "title": "Indicator off at end"
                },
                "stop_indicator_off_delay_time_ms": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The time for which the stop indicator light stays on after the movement has stopped.",
                    "title": "Stop Indicator time (in ms)"
                }
            },
            "title": "Window Covering Common Configurations: Details",
            "type": "object"
        },
        "DataModel": {
            "additionalProperties": false,
            "description": "Window covering datamodel configuration for product",
            "example": [
                "{\"data_model\":{\"window_covering_type\":1}}"
            ],
            "properties": {
                "window_covering_type": {
                    "description": "Type of window covering\n\u2022 0: Rollershade\n\u2022 1: Rollershade - 2 Motor\n\u2022 2: Rollershade - Exterior\n\u2022 3: Rollershade - Exterior - 2 Motor\n\u2022 4: Curtain/Drapery\n\u2022 5: Awning\n\u2022 6: Shutter\n\u2022 7: Tilt Blind - Tilt only\n\u2022 8: Tilt Blind - Lift and Tilt\n\u2022 9: Projector Screen\n\u2022 -1: Other\n",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ],
                    "title": "Window Covering Type",
                    "type": "integer"
                }
            },
            "required": [
                "window_covering_type"
            ],
            "title": "Window Covering: Data Model",
            "type": "object"
        },
        "DriverInput": {
            "additionalProperties": false,
            "description": "Driver details for factory reset",
            "example": [
                "{\"driver\": {\"input\": 1000, \"press_time\": 7000}}"
            ],
            "properties": {
                "input": {
                    "description": "Input Driver ID for factory reset.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Input",
                    "type": "integer"
                },
                "alternative_input": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Alternate Input Driver ID for factory reset.",
                    "title": "Alternate Input"
                },
                "exclude_button": {
                    "anyOf": [
                        {
                            "items": {
                                "maximum": 1999,
                                "minimum": 1000,
                                "type": "integer"
                            },
                            "type": "array",
                            "uniqueItems": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List of driver IDs with which the input driver ID should not work together. Example: When an exclude button is pressed and the trigger input button is also pressed, the action should not be performed.",
                    "title": "Exclude Button"
                },
                "press_time": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Number of milliseconds for which the buttons should be pressed to trigger factory reset.",
                    "title": "Long Press Time (ms)"
                }
            },
            "required": [
                "input"
            ],
            "title": "Factory Reset: Button Press: Driver Configurations",
            "type": "object"
        },
        "EventBlinkBreatheCCT": {
            "additionalProperties": false,
            "description": "Event Blink or Breathe for color select: `White`",
            "example": [
                "{\"name\":\"setup_mode_start\",\"mode\":\"breathe\",\"speed\":2000,\"color_select\":2,\"cct\":0,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":0,\"interrupt_forbidden\":true}"
            ],
            "properties": {
                "color_select": {
                    "const": 2,
                    "description": "Color mode selection to be used for the effect. Should be `2` for white color mode",
                    "enum": [
                        2
                    ],
                    "title": "Color Select",
                    "type": "integer"
                },
                "cct": {
                    "default": 50,
                    "description": "CCT value used for the effect, percentage or kelvin",
                    "maximum": 10000,
                    "minimum": 0,
                    "title": "CCT",
                    "type": "integer"
                },
                "name": {
                    "enum": [
                        "setup_mode_start",
                        "setup_mode_end",
                        "setup_started",
                        "setup_successful",
                        "setup_failed",
                        "identification_start",
                        "identification_stop",
                        "identification_blink",
                        "identification_breathe",
                        "identification_okay",
                        "identification_channel_change",
                        "identification_finish_effect",
                        "identification_stop_effect",
                        "factory_reset_triggered",
                        "forced_rollback_triggered",
                        "driver_mode",
                        "test_mode_start",
                        "test_mode_complete",
                        "test_mode_ble",
                        "advertise_self_mac_trigged",
                        "ready",
                        "network_connected",
                        "network_disconnected",
                        "normal_temp",
                        "warn_temp",
                        "protect_temp"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "mode": {
                    "description": "Effect type\n\u2022 breathe: Maximum brightness to minimum brightness and back to maximum brightness, gradually\n\u2022 blink: Maximum brightness to minimum brightness and back to maximum brightness, instantly\n",
                    "enum": [
                        "blink",
                        "breathe"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "speed": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Time for a cycle to compelete, in case of breathe or blink, in m.\n\u2022 default: 500\n",
                    "title": "Speed"
                },
                "min_brightness": {
                    "description": "Minimum brightness upto which the effect should go",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Minimum Brightness",
                    "type": "integer"
                },
                "max_brightness": {
                    "description": "Maximum brightness upto which the effect should go, also used in solid mode",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Maximum Brightness",
                    "type": "integer"
                },
                "total_ms": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "title": "Total Ms"
                },
                "interrupt_forbidden": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Interrupt Forbidden"
                }
            },
            "required": [
                "color_select",
                "name",
                "mode",
                "speed",
                "min_brightness",
                "max_brightness",
                "total_ms"
            ],
            "title": "Indicator: Event: Blink/Breathe: CCT",
            "type": "object"
        },
        "EventBlinkBreatheRGB": {
            "additionalProperties": false,
            "description": "Event Blink or Breathe for color select: `Color`",
            "example": [
                "{\"name\":\"setup_mode_start\",\"mode\":\"breathe\",\"speed\":2000,\"color_select\":1,\"r\":0,\"g\":255,\"b\":0,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":0,\"interrupt_forbidden\":true}"
            ],
            "properties": {
                "color_select": {
                    "const": 1,
                    "description": "Color mode to be used for the effect. Should be `1` for rgb color mode",
                    "enum": [
                        1
                    ],
                    "title": "Color Select",
                    "type": "integer"
                },
                "r": {
                    "description": "Red value for the effect",
                    "maximum": 255,
                    "minimum": 0,
                    "title": "Red Value",
                    "type": "integer"
                },
                "g": {
                    "description": "Green value for the effect",
                    "maximum": 255,
                    "minimum": 0,
                    "title": "Green Value",
                    "type": "integer"
                },
                "b": {
                    "description": "Blue value for the effect",
                    "maximum": 255,
                    "minimum": 0,
                    "title": "Blue Value",
                    "type": "integer"
                },
                "name": {
                    "enum": [
                        "setup_mode_start",
                        "setup_mode_end",
                        "setup_started",
                        "setup_successful",
                        "setup_failed",
                        "identification_start",
                        "identification_stop",
                        "identification_blink",
                        "identification_breathe",
                        "identification_okay",
                        "identification_channel_change",
                        "identification_finish_effect",
                        "identification_stop_effect",
                        "factory_reset_triggered",
                        "forced_rollback_triggered",
                        "driver_mode",
                        "test_mode_start",
                        "test_mode_complete",
                        "test_mode_ble",
                        "advertise_self_mac_trigged",
                        "ready",
                        "network_connected",
                        "network_disconnected",
                        "normal_temp",
                        "warn_temp",
                        "protect_temp"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "mode": {
                    "description": "Effect type\n\u2022 breathe: Maximum brightness to minimum brightness and back to maximum brightness, gradually\n\u2022 blink: Maximum brightness to minimum brightness and back to maximum brightness, instantly\n",
                    "enum": [
                        "blink",
                        "breathe"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "speed": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Time for a cycle to compelete, in case of breathe or blink, in m.\n\u2022 default: 500\n",
                    "title": "Speed"
                },
                "min_brightness": {
                    "description": "Minimum brightness upto which the effect should go",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Minimum Brightness",
                    "type": "integer"
                },
                "max_brightness": {
                    "description": "Maximum brightness upto which the effect should go, also used in solid mode",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Maximum Brightness",
                    "type": "integer"
                },
                "total_ms": {
                    "anyOf": [
                        {
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "title": "Total Ms"
                },
                "interrupt_forbidden": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Interrupt Forbidden"
                }
            },
            "required": [
                "color_select",
                "r",
                "g",
                "b",
                "name",
                "mode",
                "speed",
                "min_brightness",
                "max_brightness",
                "total_ms"
            ],
            "title": "Indicator: Event: Blink/Breathe: RGB",
            "type": "object"
        },
        "EventRestore": {
            "additionalProperties": false,
            "description": "Stop the effect and go back to previous state",
            "example": [
                "{\"name\":\"setup_mode_start\",\"mode\":\"restore\"}"
            ],
            "properties": {
                "name": {
                    "description": "\n\u2022 setup_mode_start: Device in setup mode\n\u2022 setup_started: Device setup started\n\u2022 setup_successful: Device setup completed successfully\n\u2022 setup_failed: Device setup completed failed\n\u2022 identification_start: Identification start\n\u2022 identification_stop: Identification stop\n\u2022 identification_blink: Identification blink effect\n\u2022 identification_breathe: Identification breathe effect\n\u2022 identification_okay: Identification okay effect\n\u2022 identification_channel_change: Identification channel change effect\n\u2022 identification_finish_effect: Identification finish the current effect and stop\n\u2022 identification_stop_effect: Identification stop immediately\n\u2022 factory_reset_triggered: Factory reset has been triggered and will be performed now\n\u2022 forced_rollback_triggered: Forced rollback has been triggered and will be performed now\n\u2022 driver_mode: Used to indicate the mode in which the driver currently is\n\u2022 test_mode_start: Test mode has been started\n\u2022 test_mode_complete: Test mode has been completed\n\u2022 test_mode_ble: Test mode BLE for advertising mac has been started\n",
                    "enum": [
                        "setup_mode_start",
                        "setup_mode_end",
                        "setup_started",
                        "setup_successful",
                        "setup_failed",
                        "identification_start",
                        "identification_stop",
                        "identification_blink",
                        "identification_breathe",
                        "identification_okay",
                        "identification_channel_change",
                        "identification_finish_effect",
                        "identification_stop_effect",
                        "factory_reset_triggered",
                        "forced_rollback_triggered",
                        "driver_mode",
                        "test_mode_start",
                        "test_mode_complete",
                        "test_mode_ble",
                        "advertise_self_mac_trigged",
                        "ready",
                        "network_connected",
                        "network_disconnected",
                        "normal_temp",
                        "warn_temp",
                        "protect_temp"
                    ],
                    "title": "Event Name",
                    "type": "string"
                },
                "mode": {
                    "const": "restore",
                    "description": "Indicator Event: `restore`",
                    "enum": [
                        "restore"
                    ],
                    "title": "Mode",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "mode"
            ],
            "title": "Indicator: Event: Restore",
            "type": "object"
        },
        "EventSolidCCT": {
            "additionalProperties": false,
            "description": "Event solid for color select: `White`",
            "example": [
                "{\"name\":\"setup_mode_start\",\"mode\":\"solid\",\"speed\":2000,\"color_select\":2,\"cct\":0,\"max_brightness\":100}"
            ],
            "properties": {
                "color_select": {
                    "const": 2,
                    "description": "Color mode selection to be used for the effect. Should be `2` for white color mode",
                    "enum": [
                        2
                    ],
                    "title": "Color Select",
                    "type": "integer"
                },
                "cct": {
                    "default": 50,
                    "description": "CCT value used for the effect, percentage or kelvin",
                    "maximum": 10000,
                    "minimum": 0,
                    "title": "CCT",
                    "type": "integer"
                },
                "name": {
                    "enum": [
                        "setup_mode_start",
                        "setup_mode_end",
                        "setup_started",
                        "setup_successful",
                        "setup_failed",
                        "identification_start",
                        "identification_stop",
                        "identification_blink",
                        "identification_breathe",
                        "identification_okay",
                        "identification_channel_change",
                        "identification_finish_effect",
                        "identification_stop_effect",
                        "factory_reset_triggered",
                        "forced_rollback_triggered",
                        "driver_mode",
                        "test_mode_start",
                        "test_mode_complete",
                        "test_mode_ble",
                        "advertise_self_mac_trigged",
                        "ready",
                        "network_connected",
                        "network_disconnected",
                        "normal_temp",
                        "warn_temp",
                        "protect_temp"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "mode": {
                    "const": "solid",
                    "description": "`solid` for mode Solid",
                    "enum": [
                        "solid"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "max_brightness": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "title": "Max Brightness"
                }
            },
            "required": [
                "color_select",
                "name",
                "mode",
                "max_brightness"
            ],
            "title": "Indicator: Event: Solid: CCT",
            "type": "object"
        },
        "EventSolidRGB": {
            "additionalProperties": false,
            "description": "Event solid for color select: `Color`",
            "example": [
                "{\"name\":\"setup_mode_start\",\"mode\":\"solid\",\"speed\":2000,\"color_select\":1,\"r\":0,\"g\":0,\"b\":0,\"max_brightness\":100}"
            ],
            "properties": {
                "color_select": {
                    "const": 1,
                    "description": "Color mode to be used for the effect. Should be `1` for rgb color mode",
                    "enum": [
                        1
                    ],
                    "title": "Color Select",
                    "type": "integer"
                },
                "r": {
                    "description": "Red value for the effect",
                    "maximum": 255,
                    "minimum": 0,
                    "title": "Red Value",
                    "type": "integer"
                },
                "g": {
                    "description": "Green value for the effect",
                    "maximum": 255,
                    "minimum": 0,
                    "title": "Green Value",
                    "type": "integer"
                },
                "b": {
                    "description": "Blue value for the effect",
                    "maximum": 255,
                    "minimum": 0,
                    "title": "Blue Value",
                    "type": "integer"
                },
                "name": {
                    "enum": [
                        "setup_mode_start",
                        "setup_mode_end",
                        "setup_started",
                        "setup_successful",
                        "setup_failed",
                        "identification_start",
                        "identification_stop",
                        "identification_blink",
                        "identification_breathe",
                        "identification_okay",
                        "identification_channel_change",
                        "identification_finish_effect",
                        "identification_stop_effect",
                        "factory_reset_triggered",
                        "forced_rollback_triggered",
                        "driver_mode",
                        "test_mode_start",
                        "test_mode_complete",
                        "test_mode_ble",
                        "advertise_self_mac_trigged",
                        "ready",
                        "network_connected",
                        "network_disconnected",
                        "normal_temp",
                        "warn_temp",
                        "protect_temp"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "mode": {
                    "const": "solid",
                    "description": "`solid` for mode Solid",
                    "enum": [
                        "solid"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "max_brightness": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "title": "Max Brightness"
                }
            },
            "required": [
                "color_select",
                "r",
                "g",
                "b",
                "name",
                "mode",
                "max_brightness"
            ],
            "title": "Indicator: Event: Solid: RGB",
            "type": "object"
        },
        "FactoryResetHosted": {
            "additionalProperties": false,
            "description": "Factory reset the device by host over UART",
            "example": [
                "{\"type\": \"ezc.product_common.factory_reset\", \"subtype\": 3}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.factory_reset",
                    "description": "Product Common type: ezc.product_common.factory_reset. Factory reset is mantory in the configuration.",
                    "enum": [
                        "ezc.product_common.factory_reset"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 3,
                    "description": "Factory Reset type: 3",
                    "enum": [
                        3
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "immediately_trigger": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Immediately trigger factory reset as soon as it is detected rather than waiting for a few seconds.",
                    "title": "Immediately Trigger"
                },
                "auto_trigger": {
                    "default": false,
                    "description": "Automatically trigger factory reset if the devices has been removed from the last Ecosystem (Matter fabric).",
                    "title": "Auto Trigger",
                    "type": "boolean"
                }
            },
            "required": [
                "type",
                "subtype"
            ],
            "section": "Product Common",
            "title": "Factory Reset: Hosted over UART",
            "type": "object"
        },
        "FactoryResetLongPress": {
            "additionalProperties": false,
            "description": "Factory reset the device by long pressing a button.",
            "example": [
                "{\"type\": \"ezc.product_common.factory_reset\", \"subtype\": 2, \"driver\": {\"input\": 1000, \"press_time\": 7000}, \"auto_trigger\": true, \"immediately_trigger\": true}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.factory_reset",
                    "description": "Product Common type: ezc.product_common.factory_reset. Factory reset is mantory in the configuration.",
                    "enum": [
                        "ezc.product_common.factory_reset"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 2,
                    "description": "Factory Reset type: 2",
                    "enum": [
                        2
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "immediately_trigger": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Immediately trigger factory reset as soon as it is detected rather than waiting for a few seconds.",
                    "title": "Immediately Trigger"
                },
                "auto_trigger": {
                    "default": false,
                    "description": "Automatically trigger factory reset if the devices has been removed from the last Ecosystem (Matter fabric).",
                    "title": "Auto Trigger",
                    "type": "boolean"
                },
                "driver": {
                    "$ref": "#/$defs/DriverInput",
                    "description": "Driver details for factory reset",
                    "title": "Factory Reset: Button Press: Driver Configurations"
                }
            },
            "required": [
                "type",
                "subtype",
                "driver"
            ],
            "section": "Product Common",
            "title": "Factory Reset: Button Press",
            "type": "object"
        },
        "FactoryResetOnOff": {
            "additionalProperties": false,
            "description": "Factory reset the device by power cycling (on-off-on-off).",
            "example": [
                "{\"type\": \"ezc.product_common.factory_reset\", \"subtype\": 1, \"count\": 3, \"auto_trigger\": true}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.factory_reset",
                    "description": "Product Common type: ezc.product_common.factory_reset. Factory reset is mantory in the configuration.",
                    "enum": [
                        "ezc.product_common.factory_reset"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 1,
                    "description": "Factory Reset type: 1",
                    "enum": [
                        1
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "immediately_trigger": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Immediately trigger factory reset as soon as it is detected rather than waiting for a few seconds.",
                    "title": "Immediately Trigger"
                },
                "auto_trigger": {
                    "default": false,
                    "description": "Automatically trigger factory reset if the devices has been removed from the last Ecosystem (Matter fabric).",
                    "title": "Auto Trigger",
                    "type": "boolean"
                },
                "count": {
                    "description": "Number of times the device needs to be power cycled",
                    "minimum": 3,
                    "title": "Count",
                    "type": "integer"
                }
            },
            "required": [
                "type",
                "subtype",
                "count"
            ],
            "section": "Product Common",
            "title": "Factory Reset: Power Cycle",
            "type": "object"
        },
        "ForcedRollback": {
            "additionalProperties": false,
            "description": "Forcefully rollback the device into the previous firmware after an OTA update. This is helpful in certification and also for testing OTA multiple times.",
            "example": [
                "{\"type\": \"ezc.product_common.factory_reset\", \"subtype\": 1, \"count\": 5}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.forced_rollback",
                    "description": "Product Common type: ezc.product_common.forced_rollback",
                    "enum": [
                        "ezc.product_common.forced_rollback"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 1,
                    "description": "Forced Rollback type: 1",
                    "enum": [
                        1
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "count": {
                    "description": "Number of times the device needs to be power cycled",
                    "exclusiveMinimum": 3,
                    "title": "Count",
                    "type": "integer"
                }
            },
            "required": [
                "type",
                "subtype",
                "count"
            ],
            "section": "Product Common",
            "title": "Forced Rollback",
            "type": "object"
        },
        "GPIOCfgButton": {
            "additionalProperties": false,
            "description": "Configuration for GPIO button, applicable if `ezc.driver.gpio` is selected",
            "example": [
                "{\"gpio_config\": {\"gpio_num\": 9,\"active_level\": 0,\"long_press_time\": 5}}"
            ],
            "properties": {
                "gpio_num": {
                    "description": "Input GPIO for the driver. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "GPIO pin number",
                    "type": "integer"
                },
                "active_level": {
                    "description": "When is the input detected, is it active_high or active_low\n\u2022 0: Active low. The input is detected when the input pin is connected to GND\n\u2022 1: Active high. The input is detected when the input pin is connected to VCC\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Button Active Level",
                    "type": "integer"
                },
                "long_press_time": {
                    "default": 5,
                    "description": "Time in seconds for long press event to be detected.",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "Long Press Time",
                    "type": "integer"
                }
            },
            "required": [
                "gpio_num",
                "active_level"
            ],
            "title": "Button Driver: GPIO Configurations",
            "type": "object"
        },
        "GPIOCfgRelay": {
            "additionalProperties": false,
            "description": "Applicable if gpio is selected",
            "example": [
                "{\"gpio_config\": {\"gpio_num\": 10,\"active_level\": 0}}"
            ],
            "properties": {
                "gpio_num": {
                    "description": "Output GPIO for the driver. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "Relay Output GPIO",
                    "type": "integer"
                },
                "active_level": {
                    "description": "When is the output turned on\n\u2022 0: The output is on when it connected to GND\n\u2022 1: The output is on when it connected to VCC\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Relay Active Level",
                    "type": "integer"
                }
            },
            "required": [
                "gpio_num",
                "active_level"
            ],
            "title": "Relay Driver: GPIO Configuration",
            "type": "object"
        },
        "GammaCfg": {
            "additionalProperties": false,
            "description": "Gamma configurations for light bulb. Applicable for all except when gpio is selected",
            "example": [
                "{\"gamma_config\": {\"enable_gamma_adjust\": true, \"gamma_red\": 100, \"gamma_green\": 100, \"gamma_blue\": 100, \"gamma_cold\": 100, \"gamma_warm\": 100, \"curve_coe\": 1}}"
            ],
            "properties": {
                "enable_gamma_adjust": {
                    "description": "Enable color light calibration\n\u2022 true: enable\n\u2022 false: disable\n",
                    "title": "Enable color light calibration",
                    "type": "boolean"
                },
                "gamma_red": {
                    "description": "Red gamma calibration\n",
                    "maximum": 100,
                    "minimum": 50,
                    "title": "Red Gamma Calibration",
                    "type": "integer"
                },
                "gamma_green": {
                    "description": "Green gamma calibration\n",
                    "maximum": 100,
                    "minimum": 50,
                    "title": "Green gamma calibration",
                    "type": "integer"
                },
                "gamma_blue": {
                    "description": "Blue gamma calibration\n",
                    "maximum": 100,
                    "minimum": 50,
                    "title": "Blue gamma calibration",
                    "type": "integer"
                },
                "gamma_cold": {
                    "description": "Cold gamma calibration\n",
                    "maximum": 100,
                    "minimum": 50,
                    "title": "Cold gamma calibration",
                    "type": "integer"
                },
                "gamma_warm": {
                    "description": "Warm gamma calibration\n",
                    "maximum": 100,
                    "minimum": 50,
                    "title": "Warm gamma calibration",
                    "type": "integer"
                },
                "curve_coe": {
                    "default": null,
                    "description": "White balance\n",
                    "maximum": 2.2,
                    "minimum": 0.8,
                    "title": "White balance",
                    "type": "number"
                }
            },
            "required": [
                "enable_gamma_adjust",
                "gamma_red",
                "gamma_green",
                "gamma_blue",
                "gamma_cold",
                "gamma_warm"
            ],
            "title": "Light Driver: Gamma Configurations",
            "type": "object"
        },
        "HardwareCfg": {
            "additionalProperties": false,
            "description": "Hardware configuration of led",
            "example": [
                "{\"hardware_config\": {\"white_min\": 1, \"white_max\": 100, \"white_power_max\": 100, \"rgb_min\": 1, \"rgb_max\": 100, \"rgb_power_max\": 100}}"
            ],
            "properties": {
                "white_min": {
                    "description": "Minimum brightness of white light\n",
                    "minimum": 0,
                    "title": "White Minimum",
                    "type": "integer"
                },
                "white_max": {
                    "description": "Maximum brightness of white light\n",
                    "maximum": 100,
                    "title": "White Maximum",
                    "type": "integer"
                },
                "white_power_max": {
                    "description": "Maximum white light power, 100-200.\n\u2022 If it is set to 100, the total output power is 100% of the single channel.\n",
                    "maximum": 200,
                    "minimum": 100,
                    "title": "White Power Maximum",
                    "type": "integer"
                },
                "rgb_min": {
                    "description": "Minimum brightness of color light\n",
                    "minimum": 0,
                    "title": "Minimum RGB Brightness",
                    "type": "integer"
                },
                "rgb_max": {
                    "description": "Maximum brightness of color light\n",
                    "maximum": 100,
                    "title": "Maximum RGB Brightness",
                    "type": "integer"
                },
                "rgb_power_max": {
                    "description": "Maximum power of color light\n\u2022 If it is set to 100, the total output power is 300% of the single channel, that is, 3-channel full power output.\n",
                    "maximum": 300,
                    "minimum": 100,
                    "title": "Maximum Brightness Color Light",
                    "type": "integer"
                }
            },
            "required": [
                "white_min",
                "white_max",
                "white_power_max",
                "rgb_min",
                "rgb_max",
                "rgb_power_max"
            ],
            "title": "Light Driver: Hardware Configurations",
            "type": "object"
        },
        "HostedCfgButton": {
            "additionalProperties": false,
            "description": "Applicable if hosted is selected",
            "example": [
                "{\"hosted_config\": {\"uart_driver_id\": 1}}"
            ],
            "properties": {
                "uart_driver_id": {
                    "default": 30,
                    "description": "Unique driver id used to distinguish different buttons connected to host",
                    "maximum": 255,
                    "minimum": 0,
                    "title": "Unique Driver ID",
                    "type": "integer"
                }
            },
            "title": "Button Driver: Hosted Configuration",
            "type": "object"
        },
        "HostedCfgRelay": {
            "additionalProperties": false,
            "description": "Applicable if hosted is selected",
            "example": [
                "{\"hosted_config\": {\"uart_driver_id\": 1}}"
            ],
            "properties": {
                "uart_driver_id": {
                    "default": 30,
                    "description": "Unique driver id used to distinguish different relays connected to host",
                    "maximum": 255,
                    "minimum": 0,
                    "title": "Unique Driver ID",
                    "type": "integer"
                }
            },
            "title": "Relay Driver: Hosted Configuration",
            "type": "object"
        },
        "HostedCfgRoller": {
            "additionalProperties": false,
            "description": "Applicable if hosted is selected",
            "example": [
                "{\"hosted_config\": {\"uart_driver_id\": 1}}"
            ],
            "properties": {
                "uart_driver_id": {
                    "default": 30,
                    "description": "Unique driver id used to distinguish different Roller blind connected to host",
                    "maximum": 255,
                    "minimum": 0,
                    "title": "Unique Driver ID",
                    "type": "integer"
                }
            },
            "title": "Roller blind Driver: Hosted Configuration",
            "type": "object"
        },
        "HostedUart": {
            "additionalProperties": false,
            "description": "Configure UART settings for Hosted solutions",
            "example": [
                "{\"type\": \"ezc.pre_driver.hosted_uart\", \"uart_rx\": 6, \"uart_tx\": 7, \"uart_baudrate\": 115200, \"ack_enable\": false, \"host_wakeup_pin\": -1, \"esp_wakeup_pin\": -1}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.pre_driver.hosted_uart",
                    "description": "Pre Driver type: ezc.pre_driver.hosted_uart",
                    "enum": [
                        "ezc.pre_driver.hosted_uart"
                    ],
                    "title": "type",
                    "type": "string"
                },
                "uart_rx": {
                    "default": 6,
                    "description": "Valid GPIO for RX pin for ESP ZeroCode module",
                    "title": "UART RX pin",
                    "type": "integer"
                },
                "uart_tx": {
                    "default": 7,
                    "description": "Valid GPIO for TX pin for ESP ZeroCode module",
                    "title": "UART TX pin",
                    "type": "integer"
                },
                "uart_baudrate": {
                    "default": 115200,
                    "description": "Communication baudrate for UART",
                    "title": "UART Baudrate",
                    "type": "integer"
                },
                "ack_enable": {
                    "default": true,
                    "description": "Enable to send/receive acknowledgement after every command",
                    "title": "ACK Enabled",
                    "type": "boolean"
                },
                "host_wakeup_pin": {
                    "default": -1,
                    "description": "GPIO Pin used for waking host before sending any command. -1 to disable host wakeup",
                    "title": "Host Wakeup Pin",
                    "type": "integer"
                },
                "esp_wakeup_pin": {
                    "default": -1,
                    "description": "GPIO Pin used for waking ESP before receiving any command. -1 to disable ESP wakeup",
                    "title": "ESP Wakeup Pin",
                    "type": "integer"
                }
            },
            "required": [
                "type"
            ],
            "section": "Pre Driver",
            "title": "Hosted Configuration",
            "type": "object"
        },
        "IndicatorHosted": {
            "additionalProperties": false,
            "description": "Indicator for various events to be sent to host",
            "example": [
                "{\"type\": \"ezc.product_common.indicator\", \"subtype\": 1}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.indicator",
                    "description": "Product Common type: ezc.product_common.indicator",
                    "enum": [
                        "ezc.product_common.indicator"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 1,
                    "description": "Set subtype to 1 for hosted configuration wherein all events are enabled",
                    "enum": [
                        1
                    ],
                    "title": "Subtype",
                    "type": "integer"
                }
            },
            "required": [
                "type",
                "subtype"
            ],
            "section": "Product Common",
            "title": "Indicator for Hosted Solution",
            "type": "object"
        },
        "IndicatorNonHosted": {
            "additionalProperties": false,
            "description": "Indicator for various events to be shown on the product.",
            "example": [
                "{\"type\": \"ezc.product_common.indicator\", \"subtype\": 0, \"driver\": {\"output\": 1000}, \"events\":[{\"name\": \"setup_mode_start\", \"mode\": \"breathe\", \"speed\": 2000, \"color_select\": 1, \"r\": 0, \"g\": 255, \"b\": 0, \"min_brightness\": 20, \"max_brightness\": 100, \"total_ms\": 0, \"interrupt_forbidden\": true}, {\"name\": \"setup_successful\", \"mode\": \"restore\"}]}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.indicator",
                    "description": "Product Common type: ezc.product_common.indicator",
                    "enum": [
                        "ezc.product_common.indicator"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 0,
                    "enum": [
                        0
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "driver": {
                    "$ref": "#/$defs/product_common__product_common__IndicatorNonHosted__Driver",
                    "description": "Driver details for indicator.",
                    "title": "Indicator: Driver Configurations"
                },
                "events": {
                    "description": "Various events and how should the output be shown. Example, for LED indicators, these can be in the form of some LED patterns.",
                    "items": {
                        "discriminator": {
                            "mapping": {
                                "blink": {
                                    "discriminator": {
                                        "mapping": {
                                            "1": "#/$defs/EventBlinkBreatheRGB",
                                            "2": "#/$defs/EventBlinkBreatheCCT"
                                        },
                                        "propertyName": "color_select"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/EventBlinkBreatheRGB"
                                        },
                                        {
                                            "$ref": "#/$defs/EventBlinkBreatheCCT"
                                        }
                                    ]
                                },
                                "breathe": {
                                    "discriminator": {
                                        "mapping": {
                                            "1": "#/$defs/EventBlinkBreatheRGB",
                                            "2": "#/$defs/EventBlinkBreatheCCT"
                                        },
                                        "propertyName": "color_select"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/EventBlinkBreatheRGB"
                                        },
                                        {
                                            "$ref": "#/$defs/EventBlinkBreatheCCT"
                                        }
                                    ]
                                },
                                "restore": "#/$defs/EventRestore",
                                "solid": {
                                    "discriminator": {
                                        "mapping": {
                                            "1": "#/$defs/EventSolidRGB",
                                            "2": "#/$defs/EventSolidCCT"
                                        },
                                        "propertyName": "color_select"
                                    },
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/EventSolidRGB"
                                        },
                                        {
                                            "$ref": "#/$defs/EventSolidCCT"
                                        }
                                    ]
                                }
                            },
                            "propertyName": "mode"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/EventRestore"
                            },
                            {
                                "discriminator": {
                                    "mapping": {
                                        "1": "#/$defs/EventSolidRGB",
                                        "2": "#/$defs/EventSolidCCT"
                                    },
                                    "propertyName": "color_select"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/$defs/EventSolidRGB"
                                    },
                                    {
                                        "$ref": "#/$defs/EventSolidCCT"
                                    }
                                ]
                            },
                            {
                                "discriminator": {
                                    "mapping": {
                                        "1": "#/$defs/EventBlinkBreatheRGB",
                                        "2": "#/$defs/EventBlinkBreatheCCT"
                                    },
                                    "propertyName": "color_select"
                                },
                                "oneOf": [
                                    {
                                        "$ref": "#/$defs/EventBlinkBreatheRGB"
                                    },
                                    {
                                        "$ref": "#/$defs/EventBlinkBreatheCCT"
                                    }
                                ]
                            }
                        ]
                    },
                    "minItems": 1,
                    "title": "Indicator: Events",
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "type",
                "subtype",
                "driver",
                "events"
            ],
            "section": "Product Common",
            "title": "Indicator",
            "type": "object"
        },
        "LedDriverBP1658CJ": {
            "additionalProperties": false,
            "description": "BP1658CJ driver support",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.led\", \"name\": \"bp1658cj\", \"bp1658cj_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 50},\"lighting_config\": {\"enable_gradient\": true, \"enable_memory\": false, \"enable_lowpower\": false, \"sync_change_brightness\": true, \"disable_auto_on\": true, \"beads_comb\": 3, \"fades_ms\": 300, \"cct_kelvin_min\": 2200, \"cct_kelvin_max\": 7000}, \"hardware_config\": {\"white_min\": 1, \"white_max\": 100, \"white_power_max\": 100, \"rgb_min\": 1, \"rgb_max\": 100, \"rgb_power_max\": 100}, \"gamma_config\": {\"enable_gamma_adjust\": true, \"gamma_red\": 100, \"gamma_green\": 100, \"gamma_blue\": 100, \"gamma_cold\": 100, \"gamma_warm\": 100, \"curve_coe\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.led",
                    "description": "Driver: ezc.driver.led",
                    "enum": [
                        "ezc.driver.led"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "bp1658cj",
                    "description": "Applicable only if `bp1658cj` is selected as light driver",
                    "enum": [
                        "bp1658cj"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "lighting_config": {
                    "$ref": "#/$defs/LightCfg",
                    "description": "More light configurations",
                    "title": "Light Driver: Lighting Configurations"
                },
                "hardware_config": {
                    "$ref": "#/$defs/HardwareCfg",
                    "description": "Hardware configuration of led",
                    "title": "Light Driver: Hardware Configurations"
                },
                "gamma_config": {
                    "$ref": "#/$defs/GammaCfg",
                    "description": "Gamma configurations for light bulb. Applicable for all except when gpio is selected",
                    "title": "Light Driver: Gamma Configurations"
                },
                "cct_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CctMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "color_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ColorMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "bp1658cj_config": {
                    "$ref": "#/$defs/BP1658CJCfg",
                    "description": "Applicable if `bp1658cj is selected",
                    "title": "Light Driver: BP1658CJ Light Driver: Configurations"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "lighting_config",
                "hardware_config",
                "gamma_config",
                "bp1658cj_config"
            ],
            "section": "Driver",
            "title": "Light Driver: BP1658CJ Light Driver",
            "type": "object"
        },
        "LedDriverBP5758D": {
            "additionalProperties": false,
            "description": "BP5758D driver support",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.led\", \"name\": \"bp5758d\", \"bp5758d_config\": {\"gpio_clock\": 10, \"gpio_sda\": 4, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_warm\": 3, \"out_cold\": 4, \"out1_current_max\": 6, \"out2_current_max\": 6, \"out3_current_max\": 6, \"out4_current_max\": 13, \"out5_current_max\": 13}, \"lighting_config\": {\"enable_gradient\": true, \"enable_memory\": false, \"enable_lowpower\": false, \"sync_change_brightness\": true, \"disable_auto_on\": true, \"beads_comb\": 3, \"fades_ms\": 300, \"cct_kelvin_min\": 2200, \"cct_kelvin_max\": 7000}, \"hardware_config\": {\"white_min\": 1, \"white_max\": 100, \"white_power_max\": 100, \"rgb_min\": 1, \"rgb_max\": 100, \"rgb_power_max\": 100}, \"gamma_config\": {\"enable_gamma_adjust\": true, \"gamma_red\": 100, \"gamma_green\": 100, \"gamma_blue\": 100, \"gamma_cold\": 100, \"gamma_warm\": 100, \"curve_coe\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.led",
                    "description": "Driver: ezc.driver.led",
                    "enum": [
                        "ezc.driver.led"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "bp5758d",
                    "description": "Applicable only if `bp5758d` is selected as light driver",
                    "enum": [
                        "bp5758d"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "lighting_config": {
                    "$ref": "#/$defs/LightCfg",
                    "description": "More light configurations",
                    "title": "Light Driver: Lighting Configurations"
                },
                "hardware_config": {
                    "$ref": "#/$defs/HardwareCfg",
                    "description": "Hardware configuration of led",
                    "title": "Light Driver: Hardware Configurations"
                },
                "gamma_config": {
                    "$ref": "#/$defs/GammaCfg",
                    "description": "Gamma configurations for light bulb. Applicable for all except when gpio is selected",
                    "title": "Light Driver: Gamma Configurations"
                },
                "cct_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CctMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "color_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ColorMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "bp5758d_config": {
                    "$ref": "#/$defs/BP5758DCfg",
                    "description": "Applicable if bp5758d is selected",
                    "title": "Light Driver: BP5758D Light Driver: Configurations"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "lighting_config",
                "hardware_config",
                "gamma_config",
                "bp5758d_config"
            ],
            "section": "Driver",
            "title": "Light Driver: BP5758D Light Driver",
            "type": "object"
        },
        "LedDriverGPIO": {
            "additionalProperties": false,
            "description": "GPIO powered led driver",
            "example": [
                "{\"id\": 1002, \"type\": \"ezc.driver.led\", \"name\": \"gpio\", \"gpio_config\": {\"gpio_num\": 12, \"active_level\": 0}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.led",
                    "description": "Driver: ezc.driver.led",
                    "enum": [
                        "ezc.driver.led"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "gpio",
                    "description": "`gpio` applicable only if gpio led driver is selected",
                    "enum": [
                        "gpio"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "gpio_config": {
                    "$ref": "#/$defs/led_GPIOCfg",
                    "description": "Applicable if gpio is selected",
                    "title": "Light Driver: GPIO LED Driver: Configurations"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "gpio_config"
            ],
            "section": "Driver",
            "title": "Light Driver: GPIO LED Driver",
            "type": "object"
        },
        "LedDriverPWM": {
            "additionalProperties": false,
            "description": "PWM light driver configuration",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.led\", \"name\": \"pwm\", \"pwm_config\": {\"pwm_hz\": 4000, \"invert_level\": false, \"temperature_mode\": 1, \"gpio_red\": 4, \"gpio_green\": 5, \"gpio_blue\": 6, \"gpio_cold_or_cct\": 3, \"gpio_warm_or_brightness\": 7}, \"lighting_config\": {\"enable_gradient\": true, \"enable_memory\": false, \"enable_lowpower\": false, \"sync_change_brightness\": true, \"disable_auto_on\": true, \"beads_comb\": 3, \"fades_ms\": 300, \"cct_kelvin_min\": 2200, \"cct_kelvin_max\": 7000}, \"hardware_config\": {\"white_min\": 1, \"white_max\": 100, \"white_power_max\": 100, \"rgb_min\": 1, \"rgb_max\": 100, \"rgb_power_max\": 100}, \"gamma_config\": {\"enable_gamma_adjust\": true, \"gamma_red\": 100, \"gamma_green\": 100, \"gamma_blue\": 100, \"gamma_cold\": 100, \"gamma_warm\": 100, \"curve_coe\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.led",
                    "description": "Driver: ezc.driver.led",
                    "enum": [
                        "ezc.driver.led"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "pwm",
                    "description": "Applicable if `pwm` is selected as the light driver",
                    "enum": [
                        "pwm"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "lighting_config": {
                    "$ref": "#/$defs/LightCfg",
                    "description": "More light configurations",
                    "title": "Light Driver: Lighting Configurations"
                },
                "hardware_config": {
                    "$ref": "#/$defs/HardwareCfg",
                    "description": "Hardware configuration of led",
                    "title": "Light Driver: Hardware Configurations"
                },
                "gamma_config": {
                    "$ref": "#/$defs/GammaCfg",
                    "description": "Gamma configurations for light bulb. Applicable for all except when gpio is selected",
                    "title": "Light Driver: Gamma Configurations"
                },
                "cct_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CctMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "color_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ColorMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "pwm_config": {
                    "$ref": "#/$defs/PWMCfg",
                    "description": "Contains extra PWM configurations",
                    "title": "Light Driver: PWM Light Driver: Configurations"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "lighting_config",
                "hardware_config",
                "gamma_config",
                "pwm_config"
            ],
            "section": "Driver",
            "title": "Light Driver: PWM Light Driver",
            "type": "object"
        },
        "LedDriverSM2135E": {
            "additionalProperties": false,
            "description": "SM2135E driver support",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.led\", \"name\": \"sm2135e\", \"sm2135e_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 30},\"lighting_config\": {\"enable_gradient\": true, \"enable_memory\": false, \"enable_lowpower\": false, \"sync_change_brightness\": true, \"disable_auto_on\": true, \"beads_comb\": 3, \"fades_ms\": 300, \"cct_kelvin_min\": 2200, \"cct_kelvin_max\": 7000}, \"hardware_config\": {\"white_min\": 1, \"white_max\": 100, \"white_power_max\": 100, \"rgb_min\": 1, \"rgb_max\": 100, \"rgb_power_max\": 100}, \"gamma_config\": {\"enable_gamma_adjust\": true, \"gamma_red\": 100, \"gamma_green\": 100, \"gamma_blue\": 100, \"gamma_cold\": 100, \"gamma_warm\": 100, \"curve_coe\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.led",
                    "description": "Driver: ezc.driver.led",
                    "enum": [
                        "ezc.driver.led"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "sm2135e",
                    "description": "Applicable only if `sm2135e` is selected as light driver",
                    "enum": [
                        "sm2135e"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "lighting_config": {
                    "$ref": "#/$defs/LightCfg",
                    "description": "More light configurations",
                    "title": "Light Driver: Lighting Configurations"
                },
                "hardware_config": {
                    "$ref": "#/$defs/HardwareCfg",
                    "description": "Hardware configuration of led",
                    "title": "Light Driver: Hardware Configurations"
                },
                "gamma_config": {
                    "$ref": "#/$defs/GammaCfg",
                    "description": "Gamma configurations for light bulb. Applicable for all except when gpio is selected",
                    "title": "Light Driver: Gamma Configurations"
                },
                "cct_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CctMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "color_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ColorMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "sm2135e_config": {
                    "$ref": "#/$defs/SM2135ECfg",
                    "description": "Applicable if `sm2135e is selected",
                    "title": "Light Driver: SM2135E Light Driver: Configurations"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "lighting_config",
                "hardware_config",
                "gamma_config",
                "sm2135e_config"
            ],
            "section": "Driver",
            "title": "Light Driver: SM2135E Light Driver",
            "type": "object"
        },
        "LedDriverSM2135EH": {
            "additionalProperties": false,
            "description": "SM2135EH driver support",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.led\", \"name\": \"sm2135eh\", \"sm2135eh_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 28},\"lighting_config\": {\"enable_gradient\": true, \"enable_memory\": false, \"enable_lowpower\": false, \"sync_change_brightness\": true, \"disable_auto_on\": true, \"beads_comb\": 3, \"fades_ms\": 300, \"cct_kelvin_min\": 2200, \"cct_kelvin_max\": 7000}, \"hardware_config\": {\"white_min\": 1, \"white_max\": 100, \"white_power_max\": 100, \"rgb_min\": 1, \"rgb_max\": 100, \"rgb_power_max\": 100}, \"gamma_config\": {\"enable_gamma_adjust\": true, \"gamma_red\": 100, \"gamma_green\": 100, \"gamma_blue\": 100, \"gamma_cold\": 100, \"gamma_warm\": 100, \"curve_coe\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.led",
                    "description": "Driver: ezc.driver.led",
                    "enum": [
                        "ezc.driver.led"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "sm2135eh",
                    "description": "Applicable only if `sm2135eh` is selected as light driver",
                    "enum": [
                        "sm2135eh"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "lighting_config": {
                    "$ref": "#/$defs/LightCfg",
                    "description": "More light configurations",
                    "title": "Light Driver: Lighting Configurations"
                },
                "hardware_config": {
                    "$ref": "#/$defs/HardwareCfg",
                    "description": "Hardware configuration of led",
                    "title": "Light Driver: Hardware Configurations"
                },
                "gamma_config": {
                    "$ref": "#/$defs/GammaCfg",
                    "description": "Gamma configurations for light bulb. Applicable for all except when gpio is selected",
                    "title": "Light Driver: Gamma Configurations"
                },
                "cct_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CctMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "color_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ColorMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "sm2135eh_config": {
                    "$ref": "#/$defs/SM2135EHCfg",
                    "description": "Applicable if `sm2135eh is selected",
                    "title": "Light Driver: SM2135EH Light Driver: Configurations"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "lighting_config",
                "hardware_config",
                "gamma_config",
                "sm2135eh_config"
            ],
            "section": "Driver",
            "title": "Light Driver: SM2135EH Light Driver",
            "type": "object"
        },
        "LedDriverSM2235EGH": {
            "additionalProperties": false,
            "description": "SM2135EGH driver support",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.led\", \"name\": \"sm2235egh\", \"sm2235egh_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 28},\"lighting_config\": {\"enable_gradient\": true, \"enable_memory\": false, \"enable_lowpower\": false, \"sync_change_brightness\": true, \"disable_auto_on\": true, \"beads_comb\": 3, \"fades_ms\": 300, \"cct_kelvin_min\": 2200, \"cct_kelvin_max\": 7000}, \"hardware_config\": {\"white_min\": 1, \"white_max\": 100, \"white_power_max\": 100, \"rgb_min\": 1, \"rgb_max\": 100, \"rgb_power_max\": 100}, \"gamma_config\": {\"enable_gamma_adjust\": true, \"gamma_red\": 100, \"gamma_green\": 100, \"gamma_blue\": 100, \"gamma_cold\": 100, \"gamma_warm\": 100, \"curve_coe\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.led",
                    "description": "Driver: ezc.driver.led",
                    "enum": [
                        "ezc.driver.led"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "sm2235egh",
                    "description": "Applicable only if `sm2135egh` is selected as light driver",
                    "enum": [
                        "sm2235egh"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "lighting_config": {
                    "$ref": "#/$defs/LightCfg",
                    "description": "More light configurations",
                    "title": "Light Driver: Lighting Configurations"
                },
                "hardware_config": {
                    "$ref": "#/$defs/HardwareCfg",
                    "description": "Hardware configuration of led",
                    "title": "Light Driver: Hardware Configurations"
                },
                "gamma_config": {
                    "$ref": "#/$defs/GammaCfg",
                    "description": "Gamma configurations for light bulb. Applicable for all except when gpio is selected",
                    "title": "Light Driver: Gamma Configurations"
                },
                "cct_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CctMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "color_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ColorMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "sm2235egh_config": {
                    "$ref": "#/$defs/SM2235EGHCfg",
                    "description": "Applicable if `sm2235egh is selected",
                    "title": "Light Driver: SM2135EGH Light Driver: Configurations"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "lighting_config",
                "hardware_config",
                "gamma_config",
                "sm2235egh_config"
            ],
            "section": "Driver",
            "title": "Light Driver: SM2135EGH Light Driver",
            "type": "object"
        },
        "LedDriverSM2335EGH": {
            "additionalProperties": false,
            "description": "SM2335EGH driver support",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.led\", \"name\": \"sm2335egh\", \"sm2335egh_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 30},\"lighting_config\": {\"enable_gradient\": true, \"enable_memory\": false, \"enable_lowpower\": false, \"sync_change_brightness\": true, \"disable_auto_on\": true, \"beads_comb\": 3, \"fades_ms\": 300, \"cct_kelvin_min\": 2200, \"cct_kelvin_max\": 7000}, \"hardware_config\": {\"white_min\": 1, \"white_max\": 100, \"white_power_max\": 100, \"rgb_min\": 1, \"rgb_max\": 100, \"rgb_power_max\": 100}, \"gamma_config\": {\"enable_gamma_adjust\": true, \"gamma_red\": 100, \"gamma_green\": 100, \"gamma_blue\": 100, \"gamma_cold\": 100, \"gamma_warm\": 100, \"curve_coe\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.led",
                    "description": "Driver: ezc.driver.led",
                    "enum": [
                        "ezc.driver.led"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "sm2335egh",
                    "description": "Applicable only if `sm2335egh` is selected as light driver",
                    "enum": [
                        "sm2335egh"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "lighting_config": {
                    "$ref": "#/$defs/LightCfg",
                    "description": "More light configurations",
                    "title": "Light Driver: Lighting Configurations"
                },
                "hardware_config": {
                    "$ref": "#/$defs/HardwareCfg",
                    "description": "Hardware configuration of led",
                    "title": "Light Driver: Hardware Configurations"
                },
                "gamma_config": {
                    "$ref": "#/$defs/GammaCfg",
                    "description": "Gamma configurations for light bulb. Applicable for all except when gpio is selected",
                    "title": "Light Driver: Gamma Configurations"
                },
                "cct_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CctMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "color_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ColorMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "sm2335egh_config": {
                    "$ref": "#/$defs/SM2335EGHCfg",
                    "description": "Applicable if `sm2335egh` is selected",
                    "title": "Light Driver: SM2335EGH Light Driver: Configurations"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "lighting_config",
                "hardware_config",
                "gamma_config",
                "sm2335egh_config"
            ],
            "section": "Driver",
            "title": "Light Driver: SM2335EGH Light Driver",
            "type": "object"
        },
        "LedDriverWS2812": {
            "additionalProperties": false,
            "description": "Applicable if ws2812 is selected as led driver",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.led\", \"name\": \"ws2812\", \"ws2812_config\": {\"led_num\": 1, \"ctrl_io\": 8}, \"lighting_config\": {\"enable_gradient\": true, \"enable_memory\": false, \"enable_lowpower\": false, \"sync_change_brightness\": true, \"disable_auto_on\": true, \"beads_comb\": 3, \"fades_ms\": 300, \"cct_kelvin_min\": 2200, \"cct_kelvin_max\": 7000}, \"hardware_config\": {\"white_min\": 1, \"white_max\": 100, \"white_power_max\": 100, \"rgb_min\": 1, \"rgb_max\": 100, \"rgb_power_max\": 100}, \"gamma_config\": {\"enable_gamma_adjust\": true, \"gamma_red\": 100, \"gamma_green\": 100, \"gamma_blue\": 100, \"gamma_cold\": 100, \"gamma_warm\": 100, \"curve_coe\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.led",
                    "description": "Driver: ezc.driver.led",
                    "enum": [
                        "ezc.driver.led"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "ws2812",
                    "description": "Driver name: WS2812",
                    "enum": [
                        "ws2812"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "lighting_config": {
                    "$ref": "#/$defs/LightCfg",
                    "description": "More light configurations",
                    "title": "Light Driver: Lighting Configurations"
                },
                "hardware_config": {
                    "$ref": "#/$defs/HardwareCfg",
                    "description": "Hardware configuration of led",
                    "title": "Light Driver: Hardware Configurations"
                },
                "gamma_config": {
                    "$ref": "#/$defs/GammaCfg",
                    "description": "Gamma configurations for light bulb. Applicable for all except when gpio is selected",
                    "title": "Light Driver: Gamma Configurations"
                },
                "cct_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CctMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "color_map": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ColorMapCfg"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "ws2812_config": {
                    "$ref": "#/$defs/WS2812Cfg",
                    "description": "WS2812 LED driver extra configurations",
                    "title": "Light Driver: WS2812 LED Driver: Configurations"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "lighting_config",
                "hardware_config",
                "gamma_config",
                "ws2812_config"
            ],
            "section": "Driver",
            "title": "Light Driver: WS2812 LED Driver",
            "type": "object"
        },
        "LightCfg": {
            "additionalProperties": false,
            "description": "More light configurations",
            "example": [
                "{\"lighting_config\": {\"enable_gradient\": true, \"enable_memory\": false, \"enable_lowpower\": false, \"sync_change_brightness\": true, \"disable_auto_on\": true, \"beads_comb\": 3, \"fades_ms\": 300, \"cct_kelvin_min\": 2200, \"cct_kelvin_max\": 7000}}"
            ],
            "properties": {
                "enable_gradient": {
                    "description": "Switch gradient\n\u2022 true: enable\n\u2022 false: disable\n",
                    "title": "Enable Gradient",
                    "type": "boolean"
                },
                "enable_memory": {
                    "description": "Retain the power state on reboot",
                    "title": "Enable Memory",
                    "type": "boolean"
                },
                "enable_lowpower": {
                    "description": "Low power consumption mode",
                    "title": "Enable Lowpower",
                    "type": "boolean"
                },
                "sync_change_brightness": {
                    "description": "Change the brightness synchronously",
                    "title": "Sync Brightness Change",
                    "type": "boolean"
                },
                "disable_auto_on": {
                    "description": "Disable turning on of the light",
                    "title": "Disable Auto On",
                    "type": "boolean"
                },
                "beads_comb": {
                    "description": "LED Beads Combination support by hardware\n\u2022 1: C\n\u2022 2: W\n\u2022 3: CW\n\u2022 4: RGB\n\u2022 5: 4CH_RGBC\n\u2022 6: 4CH_RGBCC\n\u2022 7: 4CH_RGBW\n\u2022 8: 4CH_RGBWW\n\u2022 9: 5CH_RGBCW\n\u2022 10: 5CH_RGBCC\n\u2022 11: 5CH_RGBWW\n\u2022 12: 5CH_RGBC\n\u2022 13: 5CH_RGBW\n",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13
                    ],
                    "title": "LED Beads Combination",
                    "type": "integer"
                },
                "fades_ms": {
                    "description": "Default ramp time in ms",
                    "exclusiveMinimum": 0,
                    "title": "Fade (in ms)",
                    "type": "integer"
                },
                "enable_precise_cct_control": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Precise CCT Control\n\u2022 true: enable\n\u2022 false: disable\n",
                    "title": "Precise CCT Control"
                },
                "enable_precise_color_control": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Precise Color Control\n\u2022 true: enable\n\u2022 false: disable\n",
                    "title": "Precise Color Control"
                },
                "cct_kelvin_min": {
                    "anyOf": [
                        {
                            "maximum": 7000,
                            "minimum": 1500,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 2200,
                    "description": "Min color temperature support by hardware in kelvin\nRange: 1500K~7000K\nDefault: 2000K",
                    "title": "Minimum Color Temperature"
                },
                "cct_kelvin_max": {
                    "anyOf": [
                        {
                            "maximum": 7000,
                            "minimum": 1500,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 7000,
                    "description": "Max color temperature support by hardware in kelvin\nRange: 1500K~7000K\nDefault: 7000K",
                    "title": "Maximum Color Temperature"
                }
            },
            "required": [
                "enable_gradient",
                "enable_memory",
                "enable_lowpower",
                "sync_change_brightness",
                "disable_auto_on",
                "beads_comb",
                "fades_ms"
            ],
            "title": "Light Driver: Lighting Configurations",
            "type": "object"
        },
        "LightConfig": {
            "additionalProperties": false,
            "description": "Light related common configurations",
            "example": [
                "{\"type\": \"ezc.product_common.light_config\", \"light_config\": {\"switch_fade\": false, \"color_fade\": true}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.light_config",
                    "description": "Product Common type: ezc.product_common.light_config",
                    "enum": [
                        "ezc.product_common.light_config"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "light_config": {
                    "$ref": "#/$defs/product_common__product_common__LightConfig__Driver",
                    "description": "Light related common configurations",
                    "title": "Light Common Configurations: Details"
                }
            },
            "required": [
                "type",
                "light_config"
            ],
            "section": "Product Common",
            "title": "Light Common Configurations",
            "type": "object"
        },
        "LightDataModel_1": {
            "additionalProperties": false,
            "description": "Data Model for Light On/Off",
            "example": [
                "{\"data_model\":{\"power_default\":1,\"power_bootup\":-1}}"
            ],
            "properties": {
                "power_default": {
                    "default": 0,
                    "description": "Default power state of the device \n\u2022 `0`: Off\n\u2022 `1`: On\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Power Default",
                    "type": "integer"
                },
                "power_bootup": {
                    "default": 0,
                    "description": "Power state of the device when it boots up:\n\u2022 `0`: Always Off\n\u2022 `1`: Always On\n\u2022 `2`: Toggle the previous value\n\u2022 `-1`: Previous value\n",
                    "maximum": 2,
                    "minimum": -1,
                    "title": "Power Boot Up",
                    "type": "integer"
                }
            },
            "title": "Light: On/Off: Data model",
            "type": "object"
        },
        "LightDataModel_2": {
            "additionalProperties": false,
            "description": "Data Model for Light Dimmable",
            "properties": {
                "power_default": {
                    "default": 0,
                    "description": "Default power state of the device \n\u2022 `0`: Off\n\u2022 `1`: On\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Power Default",
                    "type": "integer"
                },
                "power_bootup": {
                    "default": 0,
                    "description": "Power state of the device when it boots up:\n\u2022 `0`: Always Off\n\u2022 `1`: Always On\n\u2022 `2`: Toggle the previous value\n\u2022 `-1`: Previous value\n",
                    "maximum": 2,
                    "minimum": -1,
                    "title": "Power Boot Up",
                    "type": "integer"
                },
                "level_default": {
                    "default": 50,
                    "description": "Default level/brightness of the device",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Level Default",
                    "type": "integer"
                },
                "level_bootup": {
                    "default": -1,
                    "description": "Level/brightness of the device when it boots up (if -1 then previous value is taken)",
                    "maximum": 100,
                    "minimum": -1,
                    "title": "Level Bootup",
                    "type": "integer"
                }
            },
            "title": "Light: Dimmable: Data Model",
            "type": "object"
        },
        "LightDataModel_3": {
            "additionalProperties": false,
            "description": "Data Model for Light Temperature",
            "example": [
                "{\"data_model\":{\"power_default\":1,\"power_bootup\":-1,\"level_default\":50,\"level_bootup\":-1,\"color_mode_default\":1,\"color_mode_bootup\":-1,\"temperature_default\":4000,\"temperature_bootup\":-1,\"temperature_minimum_default\":1500,\"temperature_maximum_default\":7000,\"hue_default\":180,\"hue_bootup\":-1,\"saturation_default\":100,\"saturation_bootup\":-1}}"
            ],
            "properties": {
                "power_default": {
                    "default": 0,
                    "description": "Default power state of the device \n\u2022 `0`: Off\n\u2022 `1`: On\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Power Default",
                    "type": "integer"
                },
                "power_bootup": {
                    "default": 0,
                    "description": "Power state of the device when it boots up:\n\u2022 `0`: Always Off\n\u2022 `1`: Always On\n\u2022 `2`: Toggle the previous value\n\u2022 `-1`: Previous value\n",
                    "maximum": 2,
                    "minimum": -1,
                    "title": "Power Boot Up",
                    "type": "integer"
                },
                "level_default": {
                    "default": 50,
                    "description": "Default level/brightness of the device",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Level Default",
                    "type": "integer"
                },
                "level_bootup": {
                    "default": -1,
                    "description": "Level/brightness of the device when it boots up (if -1 then previous value is taken)",
                    "maximum": 100,
                    "minimum": -1,
                    "title": "Level Bootup",
                    "type": "integer"
                },
                "color_mode_default": {
                    "default": 1,
                    "description": "Default Color Mode of the device\n\u2022 `1`: Temperature\n\u2022 `2`: Color: Hue Saturation\n\u2022 `3`: Color: XY\n\u2022 `4`: Color: Enhanced Hue Saturation\n",
                    "maximum": 4,
                    "minimum": 1,
                    "title": "Color Mode Default",
                    "type": "integer"
                },
                "color_mode_bootup": {
                    "description": "Color mode of the device when it boots up\n\u2022 1: Temperature\n\u2022 2: Color: Hue Saturation\n\u2022 3: Color: XY\n\u2022 4: Color: Enhanced Hue Saturation\n\u2022 -1: Previous value\n",
                    "enum": [
                        -1,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Color Mode Bootup",
                    "type": "integer"
                },
                "temperature_default": {
                    "default": 4000,
                    "description": "Default temperature of the device\n",
                    "maximum": 7000,
                    "minimum": 1500,
                    "title": "Temperature default",
                    "type": "integer"
                },
                "temperature_bootup": {
                    "description": "Temperature of the device when it boots up\n\u2022 1500 to 7000\n\u2022 -1: Previous value\n",
                    "maximum": 7000,
                    "minimum": -1,
                    "title": "Temperature Bootup",
                    "type": "integer"
                },
                "temperature_minimum_default": {
                    "default": 2200,
                    "description": "Minimum temperature of the device\nRange: 1500K~7000K\nDefault: 2000K\nThe config should same as 'cct_kelvin_min' in driver config",
                    "minimum": 1500,
                    "title": "Temperature Minimum",
                    "type": "integer"
                },
                "temperature_maximum_default": {
                    "default": 7000,
                    "description": "Maximum temperature of the device\nRange: 1500K~7000K\nDefault: 7000K\nThe config should same as 'cct_kelvin_max' in driver config",
                    "maximum": 7000,
                    "title": "Temperature Maximum",
                    "type": "integer"
                }
            },
            "required": [
                "color_mode_bootup",
                "temperature_bootup"
            ],
            "title": "Light: Temperature: Data Model",
            "type": "object"
        },
        "LightDataModel_4": {
            "additionalProperties": false,
            "description": "Data Model for Light Temperature Color",
            "example": [
                "{\"data_model\":{\"power_default\":1,\"power_bootup\":-1,\"level_default\":50,\"level_bootup\":-1,\"color_mode_default\":1,\"color_mode_bootup\":-1,\"temperature_default\":4000,\"temperature_bootup\":-1,\"temperature_minimum_default\":1500,\"temperature_maximum_default\":7000,\"hue_default\":180,\"hue_bootup\":-1,\"saturation_default\":100,\"saturation_bootup\":-1}}"
            ],
            "properties": {
                "power_default": {
                    "default": 0,
                    "description": "Default power state of the device \n\u2022 `0`: Off\n\u2022 `1`: On\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Power Default",
                    "type": "integer"
                },
                "power_bootup": {
                    "default": 0,
                    "description": "Power state of the device when it boots up:\n\u2022 `0`: Always Off\n\u2022 `1`: Always On\n\u2022 `2`: Toggle the previous value\n\u2022 `-1`: Previous value\n",
                    "maximum": 2,
                    "minimum": -1,
                    "title": "Power Boot Up",
                    "type": "integer"
                },
                "level_default": {
                    "default": 50,
                    "description": "Default level/brightness of the device",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Level Default",
                    "type": "integer"
                },
                "level_bootup": {
                    "default": -1,
                    "description": "Level/brightness of the device when it boots up (if -1 then previous value is taken)",
                    "maximum": 100,
                    "minimum": -1,
                    "title": "Level Bootup",
                    "type": "integer"
                },
                "color_mode_default": {
                    "default": 1,
                    "description": "Default Color Mode of the device\n\u2022 `1`: Temperature\n\u2022 `2`: Color: Hue Saturation\n\u2022 `3`: Color: XY\n\u2022 `4`: Color: Enhanced Hue Saturation\n",
                    "maximum": 4,
                    "minimum": 1,
                    "title": "Color Mode Default",
                    "type": "integer"
                },
                "color_mode_bootup": {
                    "description": "Color mode of the device when it boots up\n\u2022 1: Temperature\n\u2022 2: Color: Hue Saturation\n\u2022 3: Color: XY\n\u2022 4: Color: Enhanced Hue Saturation\n\u2022 -1: Previous value\n",
                    "enum": [
                        -1,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Color Mode Bootup",
                    "type": "integer"
                },
                "temperature_default": {
                    "default": 4000,
                    "description": "Default temperature of the device\n",
                    "maximum": 7000,
                    "minimum": 1500,
                    "title": "Temperature default",
                    "type": "integer"
                },
                "temperature_bootup": {
                    "description": "Temperature of the device when it boots up\n\u2022 1500 to 7000\n\u2022 -1: Previous value\n",
                    "maximum": 7000,
                    "minimum": -1,
                    "title": "Temperature Bootup",
                    "type": "integer"
                },
                "temperature_minimum_default": {
                    "default": 2200,
                    "description": "Minimum temperature of the device\nRange: 1500K~7000K\nDefault: 2000K\nThe config should same as 'cct_kelvin_min' in driver config",
                    "minimum": 1500,
                    "title": "Temperature Minimum",
                    "type": "integer"
                },
                "temperature_maximum_default": {
                    "default": 7000,
                    "description": "Maximum temperature of the device\nRange: 1500K~7000K\nDefault: 7000K\nThe config should same as 'cct_kelvin_max' in driver config",
                    "maximum": 7000,
                    "title": "Temperature Maximum",
                    "type": "integer"
                },
                "hue_default": {
                    "default": 180,
                    "description": "Default hue of the device\n",
                    "maximum": 360,
                    "minimum": 0,
                    "title": "Hue Default",
                    "type": "integer"
                },
                "hue_bootup": {
                    "default": -1,
                    "description": "Hue of the device when it boots up\n\u2022 0 to 360\n\u2022 -1: Previous value\n",
                    "maximum": 360,
                    "minimum": -1,
                    "title": "Hue Bootup",
                    "type": "integer"
                },
                "saturation_default": {
                    "default": 100,
                    "description": "Default saturation of the device\n",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Saturation Default",
                    "type": "integer"
                },
                "saturation_bootup": {
                    "default": -1,
                    "description": "Saturation of the device when it boots up\n\u2022 0 to 100\n\u2022 -1: Previous value\n",
                    "maximum": 100,
                    "minimum": -1,
                    "title": "Satuation Bootup",
                    "type": "integer"
                }
            },
            "required": [
                "color_mode_bootup",
                "temperature_bootup"
            ],
            "title": "Light: Temperature and Color: Data Model",
            "type": "object"
        },
        "LightDataModel_5": {
            "additionalProperties": false,
            "description": "Data Model for Light Temperature Extended Color",
            "example": [
                "{\"data_model\":{\"power_default\":1,\"power_bootup\":-1,\"level_default\":50,\"level_bootup\":-1,\"color_mode_default\":1,\"color_mode_bootup\":-1,\"temperature_default\":4000,\"temperature_bootup\":-1,\"temperature_minimum_default\":1500,\"temperature_maximum_default\":7000,\"hue_default\":180,\"hue_bootup\":-1,\"saturation_default\":100,\"saturation_bootup\":-1,\"color_x_default\":1,\"color_y_default\":1}}"
            ],
            "properties": {
                "power_default": {
                    "default": 0,
                    "description": "Default power state of the device \n\u2022 `0`: Off\n\u2022 `1`: On\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Power Default",
                    "type": "integer"
                },
                "power_bootup": {
                    "default": 0,
                    "description": "Power state of the device when it boots up:\n\u2022 `0`: Always Off\n\u2022 `1`: Always On\n\u2022 `2`: Toggle the previous value\n\u2022 `-1`: Previous value\n",
                    "maximum": 2,
                    "minimum": -1,
                    "title": "Power Boot Up",
                    "type": "integer"
                },
                "level_default": {
                    "default": 50,
                    "description": "Default level/brightness of the device",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Level Default",
                    "type": "integer"
                },
                "level_bootup": {
                    "default": -1,
                    "description": "Level/brightness of the device when it boots up (if -1 then previous value is taken)",
                    "maximum": 100,
                    "minimum": -1,
                    "title": "Level Bootup",
                    "type": "integer"
                },
                "color_mode_default": {
                    "default": 1,
                    "description": "Default Color Mode of the device\n\u2022 `1`: Temperature\n\u2022 `2`: Color: Hue Saturation\n\u2022 `3`: Color: XY\n\u2022 `4`: Color: Enhanced Hue Saturation\n",
                    "maximum": 4,
                    "minimum": 1,
                    "title": "Color Mode Default",
                    "type": "integer"
                },
                "color_mode_bootup": {
                    "description": "Color mode of the device when it boots up\n\u2022 1: Temperature\n\u2022 2: Color: Hue Saturation\n\u2022 3: Color: XY\n\u2022 4: Color: Enhanced Hue Saturation\n\u2022 -1: Previous value\n",
                    "enum": [
                        -1,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Color Mode Bootup",
                    "type": "integer"
                },
                "temperature_default": {
                    "default": 4000,
                    "description": "Default temperature of the device\n",
                    "maximum": 7000,
                    "minimum": 1500,
                    "title": "Temperature default",
                    "type": "integer"
                },
                "temperature_bootup": {
                    "description": "Temperature of the device when it boots up\n\u2022 1500 to 7000\n\u2022 -1: Previous value\n",
                    "maximum": 7000,
                    "minimum": -1,
                    "title": "Temperature Bootup",
                    "type": "integer"
                },
                "temperature_minimum_default": {
                    "default": 2200,
                    "description": "Minimum temperature of the device\nRange: 1500K~7000K\nDefault: 2000K\nThe config should same as 'cct_kelvin_min' in driver config",
                    "minimum": 1500,
                    "title": "Temperature Minimum",
                    "type": "integer"
                },
                "temperature_maximum_default": {
                    "default": 7000,
                    "description": "Maximum temperature of the device\nRange: 1500K~7000K\nDefault: 7000K\nThe config should same as 'cct_kelvin_max' in driver config",
                    "maximum": 7000,
                    "title": "Temperature Maximum",
                    "type": "integer"
                },
                "hue_default": {
                    "default": 180,
                    "description": "Default hue of the device\n",
                    "maximum": 360,
                    "minimum": 0,
                    "title": "Hue Default",
                    "type": "integer"
                },
                "hue_bootup": {
                    "default": -1,
                    "description": "Hue of the device when it boots up\n\u2022 0 to 360\n\u2022 -1: Previous value\n",
                    "maximum": 360,
                    "minimum": -1,
                    "title": "Hue Bootup",
                    "type": "integer"
                },
                "saturation_default": {
                    "default": 100,
                    "description": "Default saturation of the device\n",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Saturation Default",
                    "type": "integer"
                },
                "saturation_bootup": {
                    "default": -1,
                    "description": "Saturation of the device when it boots up\n\u2022 0 to 100\n\u2022 -1: Previous value\n",
                    "maximum": 100,
                    "minimum": -1,
                    "title": "Satuation Bootup",
                    "type": "integer"
                },
                "color_x_default": {
                    "default": 100,
                    "description": "Default color X of the device",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Color X Default",
                    "type": "integer"
                },
                "color_y_default": {
                    "default": 100,
                    "description": "Default color Y of the device",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Color Y Default",
                    "type": "integer"
                }
            },
            "required": [
                "color_mode_bootup",
                "temperature_bootup"
            ],
            "title": "Light: Temperature and Extended Color: Data Model",
            "type": "object"
        },
        "LightDimmable": {
            "additionalProperties": false,
            "description": "Light: Dimmable: Product with brightness capabilities",
            "example": [
                "{\"type\":\"ezc.product.light\",\"subtype\":2,\"driver\":{\"output\":1000},\"data_model\":{\"power_default\":1,\"power_bootup\":-1,\"level_default\":50,\"level_bootup\":-1}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product.light",
                    "enum": [
                        "ezc.product.light"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "title": "Id"
                },
                "driver": {
                    "$ref": "#/$defs/product__product__LightBaseModel__Driver"
                },
                "subtype": {
                    "const": 2,
                    "enum": [
                        2
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "data_model": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LightDataModel_2"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Data Model for Light Dimmable",
                    "title": "Light: Dimmable: Data Model"
                }
            },
            "required": [
                "type",
                "driver",
                "subtype",
                "data_model"
            ],
            "title": "Light: Dimmable",
            "type": "object"
        },
        "LightOnOff": {
            "additionalProperties": false,
            "description": "Light: On/Off: Product with on/off capabilities",
            "example": [
                "{\"type\":\"ezc.product.light\",\"subtype\":1,\"driver\":{\"output\":1000},\"data_model\":{\"power_default\":1,\"power_bootup\":-1}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product.light",
                    "enum": [
                        "ezc.product.light"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "title": "Id"
                },
                "driver": {
                    "$ref": "#/$defs/product__product__LightBaseModel__Driver",
                    "description": "Driver details for light",
                    "title": "Light: Driver Configurations"
                },
                "subtype": {
                    "const": 1,
                    "enum": [
                        1
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "data_model": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LightDataModel_1"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Data Model for Light On/Off",
                    "title": "Light: On/Off: Data model"
                }
            },
            "required": [
                "type",
                "driver",
                "subtype",
                "data_model"
            ],
            "title": "Light: On Off",
            "type": "object"
        },
        "LightTempExtendColor": {
            "additionalProperties": false,
            "description": "Light: Temperature and Extended Color: Product with temperature and extended color capabilities",
            "example": [
                "{\"type\":\"ezc.product.light\",\"subtype\":5,\"driver\":{\"output\":1000},\"data_model\":{\"power_default\":1,\"power_bootup\":-1,\"level_default\":50,\"level_bootup\":-1,\"color_mode_default\":1,\"color_mode_bootup\":-1,\"temperature_default\":4000,\"temperature_bootup\":-1,\"temperature_minimum_default\":1500,\"temperature_maximum_default\":7000,\"hue_default\":180,\"hue_bootup\":-1,\"saturation_default\":100,\"saturation_bootup\":-1,\"color_x_default\":1,\"color_y_default\":1}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product.light",
                    "enum": [
                        "ezc.product.light"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "title": "Id"
                },
                "driver": {
                    "$ref": "#/$defs/product__product__LightBaseModel__Driver"
                },
                "subtype": {
                    "const": 5,
                    "enum": [
                        5
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "data_model": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LightDataModel_5"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Data Model for Light Temperature Extended Color",
                    "title": "Light: Temperature and Extended Color: Data Model"
                }
            },
            "required": [
                "type",
                "driver",
                "subtype",
                "data_model"
            ],
            "title": "Light: Temperature and Extended Color",
            "type": "object"
        },
        "LightTemperature": {
            "additionalProperties": false,
            "description": "Light: Temperature: Product with temperature capabilities",
            "example": [
                "{\"type\":\"ezc.product.light\",\"subtype\":3,\"driver\":{\"output\":1000},\"data_model\":{\"power_default\":1,\"power_bootup\":-1,\"level_default\":50,\"level_bootup\":-1,\"color_mode_default\":1,\"color_mode_bootup\":-1,\"temperature_default\":4000,\"temperature_bootup\":-1,\"temperature_minimum_default\":1500,\"temperature_maximum_default\":7000,\"hue_default\":180,\"hue_bootup\":-1,\"saturation_default\":100,\"saturation_bootup\":-1}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product.light",
                    "enum": [
                        "ezc.product.light"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "title": "Id"
                },
                "driver": {
                    "$ref": "#/$defs/product__product__LightBaseModel__Driver"
                },
                "subtype": {
                    "const": 3,
                    "enum": [
                        3
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "data_model": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LightDataModel_3"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Data Model for Light Temperature",
                    "title": "Light: Temperature: Data Model"
                }
            },
            "required": [
                "type",
                "driver",
                "subtype",
                "data_model"
            ],
            "title": "Light: Temperature",
            "type": "object"
        },
        "LightTemperatureColor": {
            "additionalProperties": false,
            "description": "Light: Temperature and Color: Product with temperature and color capabilities",
            "example": [
                "{\"type\":\"ezc.product.light\",\"subtype\":4,\"driver\":{\"output\":1000},\"data_model\":{\"power_default\":1,\"power_bootup\":-1,\"level_default\":50,\"level_bootup\":-1,\"color_mode_default\":1,\"color_mode_bootup\":-1,\"temperature_default\":4000,\"temperature_bootup\":-1,\"temperature_minimum_default\":1500,\"temperature_maximum_default\":7000,\"hue_default\":180,\"hue_bootup\":-1,\"saturation_default\":100,\"saturation_bootup\":-1}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product.light",
                    "enum": [
                        "ezc.product.light"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "title": "Id"
                },
                "driver": {
                    "$ref": "#/$defs/product__product__LightBaseModel__Driver"
                },
                "subtype": {
                    "const": 4,
                    "enum": [
                        4
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "data_model": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LightDataModel_4"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Data Model for Light Temperature Color",
                    "title": "Light: Temperature and Color: Data Model"
                }
            },
            "required": [
                "type",
                "driver",
                "subtype",
                "data_model"
            ],
            "title": "Light: Temperature and Color",
            "type": "object"
        },
        "LogOutput": {
            "additionalProperties": false,
            "description": "Configure the console logs. This can be used to change the log level or even change the default IO pin.",
            "example": [
                "{\"type\": \"ezc.pre_driver.log_output\", \"level\": 0}",
                "{\"type\": \"ezc.pre_driver.log_output\", \"tx_gpio\": 19}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.pre_driver.log_output",
                    "description": "Pre Driver type: ezc.pre_driver.log_output",
                    "enum": [
                        "ezc.pre_driver.log_output"
                    ],
                    "title": "type",
                    "type": "string"
                },
                "level": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Set the log level:\n\u2022 0: No logs\n\u2022 1: Error\n\u2022 2: Warning\n\u2022 3: Info\n\u2022 4: Debug\n\u2022 5: Verbose\n",
                    "title": "Log Level"
                },
                "tx_gpio": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Change the tx gpio for console logs. Possible GPIO values depend on the selected module.",
                    "title": "TX GPIO"
                }
            },
            "required": [
                "type"
            ],
            "section": "Pre Driver",
            "title": "Log Output",
            "type": "object"
        },
        "NTCCfgTempSensor": {
            "additionalProperties": false,
            "description": "Applicable if NTC is selected",
            "example": [
                "{\"ntc_config\" : {\"b_value\": 3950,\"r25_ohm\": 10000,\"fixed_ohm\": 10000,\"vdd_mv\": 3300,\"circuit_mode\": 1,\"atten\": 3,\"unit\": 0,\"channel\": 3}}"
            ],
            "properties": {
                "b_value": {
                    "default": 3950,
                    "description": "beta value of NTC (K)",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "beta value of NTC (K)",
                    "type": "integer"
                },
                "r25_ohm": {
                    "default": 10000,
                    "description": "25\u2103 resistor value of NTC (K)",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "25\u2103 resistor value of NTC (K)",
                    "type": "integer"
                },
                "fixed_ohm": {
                    "default": 10000,
                    "description": "fixed resistor value (\u03a9)",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "fixed resistor value (\u03a9)",
                    "type": "integer"
                },
                "vdd_mv": {
                    "default": 3300,
                    "description": "vdd voltage (mv)",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "vdd voltage (mv)",
                    "type": "integer"
                },
                "circuit_mode": {
                    "default": 1,
                    "description": "ntc circuit mode",
                    "maximum": 2,
                    "minimum": 1,
                    "title": "ntc circuit mode",
                    "type": "integer"
                },
                "atten": {
                    "default": 3,
                    "description": "adc atten",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "adc atten",
                    "type": "integer"
                },
                "unit": {
                    "default": 0,
                    "description": "adc channel",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "adc channel",
                    "type": "integer"
                },
                "channel": {
                    "default": 3,
                    "description": "adc unit",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "adc unit",
                    "type": "integer"
                }
            },
            "title": "Temperature Sensor Driver: NTC Configuration",
            "type": "object"
        },
        "OnChipCfgTempSensor": {
            "additionalProperties": false,
            "description": "Applicable if OnChip Sensor is selected",
            "example": [
                "{\"onchip_config\": {\"range_min\": 50, \"range_max\": 125 }}"
            ],
            "properties": {
                "range_min": {
                    "default": -40,
                    "description": "The minimum value of the temperature want to test (in degree Celcius)",
                    "maximum": 500,
                    "minimum": -40,
                    "title": "Minimum temperature",
                    "type": "integer"
                },
                "range_max": {
                    "default": 125,
                    "description": "The maximum value of the temperature want to test (in degree Celcius)",
                    "maximum": 500,
                    "minimum": -40,
                    "title": "Maximum temperature",
                    "type": "integer"
                }
            },
            "title": "Temperature Sensor Driver: OnChip Configuration",
            "type": "object"
        },
        "PWMCfg": {
            "additionalProperties": false,
            "description": "Contains extra PWM configurations",
            "example": [
                "{\"pwm_config\": {\"pwm_hz\": 4000, \"invert_level\": false, \"temperature_mode\": 1, \"gpio_red\": 4, \"gpio_green\": 5, \"gpio_blue\": 6, \"gpio_cold_or_cct\": 3, \"gpio_warm_or_brightness\": 7}}"
            ],
            "properties": {
                "invert_level": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "PWM invert level\n\u2022 true: invert\n\u2022 false: not invert\n",
                    "title": "PWM invert level"
                },
                "pwm_hz": {
                    "description": "PWM frequency (in hz)",
                    "maximum": 20000,
                    "minimum": 1000,
                    "title": "PWM frequency (in hz)",
                    "type": "integer"
                },
                "temperature_mode": {
                    "description": "riving mode of color temperature adjustment\n\u2022 0: CCT mode: CCT + brightness\n\u2022 1: CW mode: cold white light + warm white light\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Temperature Mode",
                    "type": "integer"
                },
                "phase_delay": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                4
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Phase delay in pwm:\n\u2022 0: No phase delay\n\u2022 1: RGB channel phase delay\n\u2022 2: CW channel phase delay\n\u2022 4: RGBCW channel phase delay\n",
                    "title": "Phase Delay"
                },
                "gpio_red": {
                    "description": "Red light output pin. Range of values depend on the chip",
                    "minimum": -1,
                    "title": "GPIO red",
                    "type": "integer"
                },
                "gpio_green": {
                    "description": "Green light output pin. Range of values depend on the chip",
                    "minimum": -1,
                    "title": "GPIO green",
                    "type": "integer"
                },
                "gpio_blue": {
                    "description": "Blue light output pin. Range of values depend on the chip",
                    "minimum": -1,
                    "title": "GPIO blue",
                    "type": "integer"
                },
                "gpio_cold_or_cct": {
                    "description": "Cold white light/CCT output pin. Range of values depend on the chip",
                    "minimum": -1,
                    "title": "Cold white light/CCT output pin",
                    "type": "integer"
                },
                "gpio_warm_or_brightness": {
                    "description": "Warm white light/brightness output pin. Range of values depend on the chip",
                    "minimum": -1,
                    "title": "gpio_warm_or_brightness: Warm",
                    "type": "integer"
                }
            },
            "required": [
                "pwm_hz",
                "temperature_mode",
                "gpio_red",
                "gpio_green",
                "gpio_blue",
                "gpio_cold_or_cct",
                "gpio_warm_or_brightness"
            ],
            "title": "Light Driver: PWM Light Driver: Configurations",
            "type": "object"
        },
        "PowerManagement": {
            "additionalProperties": false,
            "description": "Configure the power usage of the device. This can be useful for devices which have power limitations.",
            "example": [
                "{\"type\": \"ezc.pre_driver.power_management\", \"enable_light_sleep\": true, \"max_freq_mhz\": 160, \"min_freq_mhz\": 10}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.pre_driver.power_management",
                    "description": "Pre Driver type: ezc.pre_driver.power_management",
                    "enum": [
                        "ezc.pre_driver.power_management"
                    ],
                    "title": "type",
                    "type": "string"
                },
                "enable_light_sleep": {
                    "default": false,
                    "description": "It enables light sleep, It helps in reducing power usage.",
                    "title": "Enable Light Sleep",
                    "type": "boolean"
                },
                "max_freq_mhz": {
                    "description": "Maximum frequency that device will go to.",
                    "exclusiveMinimum": 40,
                    "maximum": 240,
                    "title": "Max Frequency (in Mhz)",
                    "type": "integer"
                },
                "min_freq_mhz": {
                    "description": "Minimum frequency that device will go to.",
                    "maximum": 240,
                    "minimum": 10,
                    "title": "Min Frequency (in Mhz)",
                    "type": "integer"
                }
            },
            "required": [
                "type",
                "max_freq_mhz",
                "min_freq_mhz"
            ],
            "section": "Pre Driver",
            "title": "Power Management",
            "type": "object"
        },
        "RelayGPIODriver": {
            "additionalProperties": false,
            "description": "GPIO based relay driver",
            "example": [
                "{\"id\": 1000,\"type\": \"ezc.driver.relay\",\"name\": \"gpio\", \"gpio_config\": {\"gpio_num\": 10,\"active_level\": 0}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.relay",
                    "description": "Driver: ezc.driver.relay",
                    "enum": [
                        "ezc.driver.relay"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "gpio",
                    "description": "`hosted` applicable only if hosted driver is selected",
                    "enum": [
                        "gpio"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "gpio_config": {
                    "$ref": "#/$defs/GPIOCfgRelay",
                    "description": "Applicable if gpio is selected",
                    "title": "Relay Driver: GPIO Configuration"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "gpio_config"
            ],
            "section": "Driver",
            "title": "Relay Driver: GPIO",
            "type": "object"
        },
        "RelayHostedDriver": {
            "additionalProperties": false,
            "description": "UART based relay driver",
            "example": [
                "{\"id\": 1000,\"type\": \"ezc.driver.relay\",\"name\": \"hosted\", \"hosted_config\": {\"uart_driver_id\": 1}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.relay",
                    "description": "Driver: ezc.driver.relay",
                    "enum": [
                        "ezc.driver.relay"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "hosted",
                    "description": "`hosted` applicable only if hosted driver is selected",
                    "enum": [
                        "hosted"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "hosted_config": {
                    "$ref": "#/$defs/HostedCfgRelay",
                    "description": "Applicable if hosted is selected",
                    "title": "Relay Driver: Hosted Configuration"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "hosted_config"
            ],
            "section": "Driver",
            "title": "Relay Driver: Hosted",
            "type": "object"
        },
        "RollerBlindCalibrationCfg_1": {
            "additionalProperties": false,
            "description": "Automatic Roller Blind calibration configurations and options",
            "example": [
                "{\"calibration_config\": {\"calibration_type\": 1, \"detect_gpio\": 26, \"detection_frequency\": 50, \"detection_frequency_offset\": 20}}"
            ],
            "properties": {
                "calibration_type": {
                    "const": 1,
                    "description": "`1` for Auto Calibration, `2` for Manual Calibration",
                    "enum": [
                        1
                    ],
                    "title": "Calibration type",
                    "type": "integer"
                },
                "detect_gpio": {
                    "description": "Input GPIO to detect frequency for auto calibration if auto calibration type. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "Input Detect GPIO",
                    "type": "integer"
                },
                "detection_frequency": {
                    "description": "The frequency to be detected for auto calibration if auto calibration type",
                    "minimum": 0,
                    "title": "Frequency",
                    "type": "integer"
                },
                "detection_frequency_offset": {
                    "description": "The offset in the frequency to be detected for auto calibration if auto calibration type",
                    "minimum": 0,
                    "title": "Detection Frequency Offset",
                    "type": "integer"
                }
            },
            "required": [
                "calibration_type",
                "detect_gpio",
                "detection_frequency",
                "detection_frequency_offset"
            ],
            "title": "Roller Blind Driver: Automatic calibration configurations",
            "type": "object"
        },
        "RollerBlindCalibrationCfg_2": {
            "additionalProperties": false,
            "description": "Manual Roller Blind calibration configurations and options",
            "example": [
                "{\"calibration_config\": {\"calibration_type\": 2}}"
            ],
            "properties": {
                "calibration_type": {
                    "const": 2,
                    "description": "`1` for Auto Calibration, `2` for Manual Calibration",
                    "enum": [
                        2
                    ],
                    "title": "Calibration type",
                    "type": "integer"
                }
            },
            "required": [
                "calibration_type"
            ],
            "title": "Roller Blind Driver: Manual calibration configurations",
            "type": "object"
        },
        "RollerBlindCfg": {
            "additionalProperties": false,
            "description": "More Roller Blind Configuration",
            "example": [
                "{\"roller_blind_config\": {\"allow_reverse_in_moving\": false, \"pause_between_moves\": true, \"delay_time_between_moves_ms\": 500, \"relay_control_delay_time_ms\": 0, \"default_max_move_time_ms\": 60000, \"use_default_time_when_not_calibrated\": false}}"
            ],
            "properties": {
                "allow_reverse_in_moving": {
                    "description": "Behaviour when pressing the opposite direction button, when in motion.\n\u2022 true: Reverse the motion\n\u2022 false: Stop the motion\n",
                    "title": "Allow Reverse In Moving",
                    "type": "boolean"
                },
                "pause_between_moves": {
                    "description": "Whether to pause between movements.\n\u2022 true: pause between movements.\n\u2022 false: don't have pause between movements.\n",
                    "title": "Pause Between Moves",
                    "type": "boolean"
                },
                "delay_time_between_moves_ms": {
                    "default": 0,
                    "description": "Delay in between changing the direction, in milliseconds.\n",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "Delay Time Between Moves (in ms)",
                    "type": "integer"
                },
                "relay_control_delay_time_ms": {
                    "default": 0,
                    "description": "Relay control delay time",
                    "maximum": 65535,
                    "minimum": 0,
                    "title": "Relay Control Delay Time (in ms)",
                    "type": "integer"
                },
                "default_max_move_time_ms": {
                    "description": "The default moving time for the up and down during calibration or before calibration.",
                    "maximum": 214748364,
                    "minimum": 0,
                    "title": "Default Max Move Time (in ms)",
                    "type": "integer"
                },
                "use_default_time_when_not_calibrated": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Always moving default time when un-calibrate.\n\u2022 true: use default time.\n\u2022 false: don't use default time.\n",
                    "title": "Use Default Time When Not Calibrated"
                },
                "move_time_compensation_percent": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Compensation moving time when the target position of window covering is the end of window cover(fully open/close)..\n\u2022 min: 0\n\u2022 max: 100\n\u2022 step: 1\n\u2022 default: 0\n",
                    "title": "Move Time Compensation Percent"
                }
            },
            "required": [
                "allow_reverse_in_moving",
                "pause_between_moves",
                "default_max_move_time_ms"
            ],
            "title": "Roller Blind Driver: Configurations: Movement Settings",
            "type": "object"
        },
        "RollerBlindGPIOCfg": {
            "additionalProperties": false,
            "description": "More GPIO Configuration",
            "example": [
                "{\"gpio_config\": {\"up_relay_gpio\": 25, \"up_relay_active_level\": 1, \"down_relay_gpio\": 12, \"down_relay_active_level\": 1}}"
            ],
            "properties": {
                "up_relay_gpio": {
                    "description": "Output GPIO for the up relay driver. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "Up Relay GPIO",
                    "type": "integer"
                },
                "up_relay_active_level": {
                    "anyOf": [
                        {
                            "enum": [
                                1,
                                2
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "When is the output turned on\n\u2022 0: The output is on when it connected to GND\n\u2022 1: The output is on when it connected to VCC\n\u2022 default: 1\n",
                    "title": "Up Relay Active Level"
                },
                "down_relay_gpio": {
                    "description": "Output GPIO for the down relay driver. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "Down Relay GPIO",
                    "type": "integer"
                },
                "down_relay_active_level": {
                    "anyOf": [
                        {
                            "enum": [
                                1,
                                2
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "When is the output turned on\n\u2022 0: The output is on when it connected to GND\n\u2022 1: The output is on when it connected to VCC\n\u2022 default: 1\n",
                    "title": "Down Relay Active Level"
                }
            },
            "required": [
                "up_relay_gpio",
                "down_relay_gpio"
            ],
            "title": "Roller Blind Driver: Configurations: GPIO Settings",
            "type": "object"
        },
        "RollerBlindGPIODriver": {
            "additionalProperties": false,
            "description": "GPIO based Roller blind driver",
            "example": [
                "{\"id\":1001,\"type\":\"ezc.driver.roller_blind\",\"name\":\"gpio\",\"roller_blind_config\":{\"allow_reverse_in_moving\":false,\"pause_between_moves\":true,\"delay_time_between_moves_ms\":500,\"relay_control_delay_time_ms\":0,\"default_max_move_time_ms\":60000},\"gpio_config\":{\"up_relay_gpio\":10,\"down_relay_gpio\":11},\"calibration_config\":{\"calibration_type\":1,\"detect_gpio\":12,\"detection_frequency\":50,\"detection_frequency_offset\":20}}"
            ],
            "properties": {
                "id": {
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Id",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.roller_blind",
                    "description": "Driver: ezc.driver.roller_blind",
                    "enum": [
                        "ezc.driver.roller_blind"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "gpio",
                    "description": "`hosted` applicable only if hosted driver is selected",
                    "enum": [
                        "gpio"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "gpio_config": {
                    "$ref": "#/$defs/RollerBlindGPIOCfg",
                    "description": "More GPIO Configuration",
                    "title": "Roller Blind Driver: Configurations: GPIO Settings"
                },
                "roller_blind_config": {
                    "$ref": "#/$defs/RollerBlindCfg",
                    "description": "More Roller Blind Configuration",
                    "title": "Roller Blind Driver: Configurations: Movement Settings"
                },
                "calibration_config": {
                    "discriminator": {
                        "mapping": {
                            "1": "#/$defs/RollerBlindCalibrationCfg_1",
                            "2": "#/$defs/RollerBlindCalibrationCfg_2"
                        },
                        "propertyName": "calibration_type"
                    },
                    "oneOf": [
                        {
                            "$ref": "#/$defs/RollerBlindCalibrationCfg_1"
                        },
                        {
                            "$ref": "#/$defs/RollerBlindCalibrationCfg_2"
                        }
                    ],
                    "title": "Calibration Config"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "gpio_config",
                "roller_blind_config",
                "calibration_config"
            ],
            "section": "Driver",
            "title": "Roller blind Driver: GPIO",
            "type": "object"
        },
        "RollerBlindHostedDriver": {
            "additionalProperties": false,
            "description": "UART based Roller blind driver",
            "example": [
                "{\"id\": 1000,\"type\": \"ezc.driver.roller_blind\",\"name\": \"hosted\", \"hosted_config\": {\"uart_driver_id\": 1}}"
            ],
            "properties": {
                "id": {
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Id",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.roller_blind",
                    "description": "Driver: ezc.driver.roller_blind",
                    "enum": [
                        "ezc.driver.roller_blind"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "hosted",
                    "description": "`hosted` applicable only if hosted driver is selected",
                    "enum": [
                        "hosted"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "hosted_config": {
                    "$ref": "#/$defs/HostedCfgRoller",
                    "description": "Applicable if hosted is selected",
                    "title": "Roller blind Driver: Hosted Configuration"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "hosted_config"
            ],
            "section": "Driver",
            "title": "Roller blind Driver: Hosted",
            "type": "object"
        },
        "SM2135ECfg": {
            "additionalProperties": false,
            "description": "Applicable if `sm2135e is selected",
            "example": [
                "{\"sm2135e_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 30}}"
            ],
            "properties": {
                "gpio_clock": {
                    "description": "IIC clock signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC clock signal pin",
                    "type": "integer"
                },
                "gpio_sda": {
                    "description": "IIC data signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC data signal pin",
                    "type": "integer"
                },
                "iic_khz": {
                    "description": "IIC signal frequency in KHz",
                    "exclusiveMinimum": 0,
                    "title": "IIC Frequency",
                    "type": "integer"
                },
                "out_red": {
                    "description": "Red light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Red light output pin",
                    "type": "integer"
                },
                "out_green": {
                    "description": "Green light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Green light output pin",
                    "type": "integer"
                },
                "out_blue": {
                    "description": "Blue light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Blue light output pin",
                    "type": "integer"
                },
                "out_cold": {
                    "description": "Cold white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Cold white light output pin",
                    "type": "integer"
                },
                "out_warm": {
                    "description": "Warm white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Warm white light output pin",
                    "type": "integer"
                },
                "white_current_max": {
                    "description": "Maximum white light current in mA",
                    "maximum": 60,
                    "minimum": 10,
                    "multipleOf": 5,
                    "title": "White Current Max",
                    "type": "integer"
                },
                "rgb_current_max": {
                    "description": "Maximum current of color light in mA",
                    "maximum": 50,
                    "minimum": 10,
                    "multipleOf": 5,
                    "title": "RGB Current Max",
                    "type": "integer"
                }
            },
            "required": [
                "gpio_clock",
                "gpio_sda",
                "iic_khz",
                "out_red",
                "out_green",
                "out_blue",
                "out_cold",
                "out_warm",
                "white_current_max",
                "rgb_current_max"
            ],
            "title": "Light Driver: SM2135E Light Driver: Configurations",
            "type": "object"
        },
        "SM2135EHCfg": {
            "additionalProperties": false,
            "description": "Applicable if `sm2135eh is selected",
            "example": [
                "{\"sm2135eh_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 28}}"
            ],
            "properties": {
                "gpio_clock": {
                    "description": "IIC clock signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC clock signal pin",
                    "type": "integer"
                },
                "gpio_sda": {
                    "description": "IIC data signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC data signal pin",
                    "type": "integer"
                },
                "iic_khz": {
                    "description": "IIC signal frequency in KHz",
                    "exclusiveMinimum": 0,
                    "title": "IIC Frequency",
                    "type": "integer"
                },
                "out_red": {
                    "description": "Red light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Red light output pin",
                    "type": "integer"
                },
                "out_green": {
                    "description": "Green light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Green light output pin",
                    "type": "integer"
                },
                "out_blue": {
                    "description": "Blue light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Blue light output pin",
                    "type": "integer"
                },
                "out_cold": {
                    "description": "Cold white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Cold white light output pin",
                    "type": "integer"
                },
                "out_warm": {
                    "description": "Warm white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Warm white light output pin",
                    "type": "integer"
                },
                "white_current_max": {
                    "description": "Maximum white light current in mA",
                    "enum": [
                        0,
                        5,
                        10,
                        15,
                        20,
                        25,
                        30,
                        35,
                        40,
                        45,
                        50,
                        55,
                        59,
                        63,
                        67,
                        71
                    ],
                    "title": "White Current Max",
                    "type": "integer"
                },
                "rgb_current_max": {
                    "description": "Maximum current of color light in mA",
                    "maximum": 64,
                    "minimum": 4,
                    "multipleOf": 4,
                    "title": "RGB Current Max",
                    "type": "integer"
                }
            },
            "required": [
                "gpio_clock",
                "gpio_sda",
                "iic_khz",
                "out_red",
                "out_green",
                "out_blue",
                "out_cold",
                "out_warm",
                "white_current_max",
                "rgb_current_max"
            ],
            "title": "Light Driver: SM2135EH Light Driver: Configurations",
            "type": "object"
        },
        "SM2235EGHCfg": {
            "additionalProperties": false,
            "description": "Applicable if `sm2235egh is selected",
            "example": [
                "{\"sm2235egh_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 28}}"
            ],
            "properties": {
                "gpio_clock": {
                    "description": "IIC clock signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC clock signal pin",
                    "type": "integer"
                },
                "gpio_sda": {
                    "description": "IIC data signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC data signal pin",
                    "type": "integer"
                },
                "iic_khz": {
                    "description": "IIC signal frequency in KHz",
                    "exclusiveMinimum": 0,
                    "title": "IIC Frequency",
                    "type": "integer"
                },
                "out_red": {
                    "description": "Red light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Red light output pin",
                    "type": "integer"
                },
                "out_green": {
                    "description": "Green light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Green light output pin",
                    "type": "integer"
                },
                "out_blue": {
                    "description": "Blue light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Blue light output pin",
                    "type": "integer"
                },
                "out_cold": {
                    "description": "Cold white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Cold white light output pin",
                    "type": "integer"
                },
                "out_warm": {
                    "description": "Warm white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Warm white light output pin",
                    "type": "integer"
                },
                "white_current_max": {
                    "description": "Maximum white light current in mA",
                    "maximum": 80,
                    "minimum": 5,
                    "multipleOf": 5,
                    "title": "White Current Max",
                    "type": "integer"
                },
                "rgb_current_max": {
                    "description": "Maximum current of color light in mA",
                    "maximum": 64,
                    "minimum": 4,
                    "multipleOf": 4,
                    "title": "RGB Current Max",
                    "type": "integer"
                }
            },
            "required": [
                "gpio_clock",
                "gpio_sda",
                "iic_khz",
                "out_red",
                "out_green",
                "out_blue",
                "out_cold",
                "out_warm",
                "white_current_max",
                "rgb_current_max"
            ],
            "title": "Light Driver: SM2135EGH Light Driver: Configurations",
            "type": "object"
        },
        "SM2335EGHCfg": {
            "additionalProperties": false,
            "description": "Applicable if `sm2335egh` is selected",
            "example": [
                "{\"sm2335egh_config\": {\"gpio_clock\": 7, \"gpio_sda\": 3, \"iic_khz\": 300, \"out_red\": 2, \"out_green\": 1, \"out_blue\": 0, \"out_cold\": 4, \"out_warm\": 3, \"white_current_max\": 50, \"rgb_current_max\": 30}}"
            ],
            "properties": {
                "gpio_clock": {
                    "description": "IIC clock signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC clock signal pin",
                    "type": "integer"
                },
                "gpio_sda": {
                    "description": "IIC data signal pin. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "IIC data signal pin",
                    "type": "integer"
                },
                "iic_khz": {
                    "description": "IIC signal frequency in KHz",
                    "exclusiveMinimum": 0,
                    "title": "IIC Frequency",
                    "type": "integer"
                },
                "out_red": {
                    "description": "Red light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Red light output pin",
                    "type": "integer"
                },
                "out_green": {
                    "description": "Green light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Green light output pin",
                    "type": "integer"
                },
                "out_blue": {
                    "description": "Blue light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Blue light output pin",
                    "type": "integer"
                },
                "out_cold": {
                    "description": "Cold white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Cold white light output pin",
                    "type": "integer"
                },
                "out_warm": {
                    "description": "Warm white light output pin. Range of values depend on the chip",
                    "enum": [
                        -1,
                        0,
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Warm white light output pin",
                    "type": "integer"
                },
                "white_current_max": {
                    "description": "Maximum white light current in mA",
                    "maximum": 80,
                    "minimum": 5,
                    "multipleOf": 5,
                    "title": "White Current Max",
                    "type": "integer"
                },
                "rgb_current_max": {
                    "description": "Maximum current of color light in mA",
                    "maximum": 160,
                    "minimum": 10,
                    "multipleOf": 10,
                    "title": "RGB Current Max",
                    "type": "integer"
                }
            },
            "required": [
                "gpio_clock",
                "gpio_sda",
                "iic_khz",
                "out_red",
                "out_green",
                "out_blue",
                "out_cold",
                "out_warm",
                "white_current_max",
                "rgb_current_max"
            ],
            "title": "Light Driver: SM2335EGH Light Driver: Configurations",
            "type": "object"
        },
        "SocketConfig": {
            "additionalProperties": false,
            "description": "Socket related common configurations",
            "example": [
                "{\"type\": \"ezc.product_common.socket_config\", \"update_driver\": true}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.socket_config",
                    "description": "Product Common type: ezc.product_common.socket_config",
                    "enum": [
                        "ezc.product_common.socket_config"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "update_driver": {
                    "default": true,
                    "description": "Set to false if the driver is already updated and does not need to be updated again. This is useful in 2 chip solutions, where the socket output is changed as soon as the button is pressed on the Host MCU before sending the command to the Espressif module.",
                    "title": "Update Driver",
                    "type": "boolean"
                }
            },
            "required": [
                "type"
            ],
            "section": "Product Common",
            "title": "Socket Common Configurations",
            "type": "object"
        },
        "SocketDataModel_1": {
            "additionalProperties": false,
            "description": "Datamodel for simple On/Off sockets",
            "example": [
                "{\"data_model\":{\"power_default\":1,\"power_bootup\":-1}}"
            ],
            "properties": {
                "power_default": {
                    "default": 0,
                    "description": "Default power state of the device\n\u2022 0: Off\n\u2022 1: On\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Default Power State",
                    "type": "integer"
                },
                "power_bootup": {
                    "default": 0,
                    "description": "Power state of the device when it boots up\n\u2022 0: Always Off\n\u2022 1: Always On\n\u2022 2: Toggle the previous value\n\u2022 -1: Previous value\n",
                    "maximum": 2,
                    "minimum": -1,
                    "title": "Power State on Boot Up",
                    "type": "integer"
                }
            },
            "title": "Socket: On/Off: Data Model",
            "type": "object"
        },
        "SocketDataModel_2": {
            "additionalProperties": false,
            "description": "Datamodel of Dimmable Socket",
            "example": [
                "{\"data_model\":{\"power_default\":1,\"power_bootup\":-1,\"level_default\":50,\"level_bootup\":50}}"
            ],
            "properties": {
                "power_default": {
                    "default": 0,
                    "description": "Default power state of the device\n\u2022 0: Off\n\u2022 1: On\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Default Power State",
                    "type": "integer"
                },
                "power_bootup": {
                    "default": 0,
                    "description": "Power state of the device when it boots up\n\u2022 0: Always Off\n\u2022 1: Always On\n\u2022 2: Toggle the previous value\n\u2022 -1: Previous value\n",
                    "maximum": 2,
                    "minimum": -1,
                    "title": "Power State on Boot Up",
                    "type": "integer"
                },
                "level_default": {
                    "default": 50,
                    "description": "Default level/brightness of the device",
                    "maximum": 100,
                    "minimum": 0,
                    "title": "Default Level",
                    "type": "integer"
                },
                "level_bootup": {
                    "default": -1,
                    "description": "Level/Brightness of the device when it boots up",
                    "maximum": 100,
                    "minimum": -1,
                    "title": "Level/Brightnesss on Bootup",
                    "type": "integer"
                }
            },
            "title": "Socket: Dimmable: Data Model",
            "type": "object"
        },
        "SocketDimmable": {
            "additionalProperties": false,
            "description": "Product Description for Dimmable Socket",
            "example": [
                "{\"type\":\"ezc.product.socket\",\"subtype\":2,\"driver\":{\"input\":1000,\"input_mode\":1,\"input_trigger_type\":1,\"output\":1001,\"indicator\":1002},\"data_model\":{\"power_default\":1,\"power_bootup\":-1,\"level_default\":50,\"level_bootup\":50}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product.socket",
                    "enum": [
                        "ezc.product.socket"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "title": "Id"
                },
                "driver": {
                    "$ref": "#/$defs/product__product__SocketBaseModel__Driver"
                },
                "subtype": {
                    "const": 2,
                    "enum": [
                        2
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "data_model": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SocketDataModel_2"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Datamodel of Dimmable Socket",
                    "title": "Socket: Dimmable: Data Model"
                }
            },
            "required": [
                "type",
                "driver",
                "subtype"
            ],
            "title": "Socket: Dimmable",
            "type": "object"
        },
        "SocketInputMode": {
            "additionalProperties": false,
            "description": "Dynamically configure the socket's input mode to push button or rocker switch",
            "example": [
                "{\"type\": \"ezc.product_common.socket_input_mode\", \"driver\": {\"input\": 1000}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.socket_input_mode",
                    "description": "Product Common type: ezc.product_common.socket_input_mode",
                    "enum": [
                        "ezc.product_common.socket_input_mode"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "driver": {
                    "$ref": "#/$defs/product_common__product_common__SocketInputMode__Driver",
                    "description": "Driver details for socket input mode",
                    "title": "Socket Input Mode: Driver Configurations"
                }
            },
            "required": [
                "type",
                "driver"
            ],
            "section": "Product Common",
            "title": "Socket Input Mode",
            "type": "object"
        },
        "SocketOnOff": {
            "additionalProperties": false,
            "description": "Product Description for On/Off Socket",
            "example": [
                "{\"type\":\"ezc.product.socket\",\"subtype\":1,\"driver\":{\"input\":1000,\"input_mode\":1,\"input_trigger_type\":1,\"output\":1001,\"indicator\":1002},\"data_model\":{\"power_default\":1,\"power_bootup\":-1}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product.socket",
                    "enum": [
                        "ezc.product.socket"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "title": "Id"
                },
                "driver": {
                    "$ref": "#/$defs/product__product__SocketBaseModel__Driver"
                },
                "subtype": {
                    "const": 1,
                    "enum": [
                        1
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "data_model": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SocketDataModel_1"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Datamodel for simple On/Off sockets",
                    "title": "Socket: On/Off: Data Model"
                }
            },
            "required": [
                "type",
                "driver",
                "subtype"
            ],
            "title": "Socket: On/Off",
            "type": "object"
        },
        "SocketPower": {
            "additionalProperties": false,
            "description": "Common button to change the power of all the sockets on the device. This is useful for multi-channel sockets like an extension board. If even one of the sockets is powered on, all of them will be powered off. If al the sockets are powered off, all of them will be powered on.",
            "example": [
                "{\"type\": \"ezc.product_common.socket_power\", \"driver\": {\"input\": 1002, \"indicator\": 1003}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.socket_power",
                    "description": "Product Common type: ezc.product_common.socket_power",
                    "enum": [
                        "ezc.product_common.socket_power"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "driver": {
                    "$ref": "#/$defs/product_common__product_common__SocketPower__Driver",
                    "description": "Driver details for socket power",
                    "title": "Socket Power: Driver Configurations"
                }
            },
            "required": [
                "type",
                "driver"
            ],
            "section": "Product Common",
            "title": "Socket Power",
            "type": "object"
        },
        "Switch": {
            "additionalProperties": false,
            "description": "Product Switch description and options",
            "example": [
                "{\"type\":\"ezc.product.switch\",\"subtype\":1,\"driver\":{\"input\":1000}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product.switch",
                    "description": "Product: ezc.product.switch",
                    "enum": [
                        "ezc.product.switch"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "description": "Product ID to distinguish between different products. Should be unique for each product",
                    "title": "Product ID"
                },
                "subtype": {
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "driver": {
                    "$ref": "#/$defs/product__product__Switch__Driver",
                    "description": "Driver configurations for switch",
                    "title": "Switch: Driver Configurations"
                }
            },
            "required": [
                "type",
                "subtype",
                "driver"
            ],
            "title": "Switch",
            "type": "object"
        },
        "TempProtect": {
            "additionalProperties": false,
            "description": "Temperature protect configuration. This is an optional configuration.",
            "example": [
                "{\"type\": \"ezc.product_common.temp_protect\", \"input\": 1005, \"normal_temp\": 25, \"warn_temp\": 105}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.temp_protect",
                    "description": "Product Common type: ezc.product_common.temp_protect. Devices with temperature protect.",
                    "enum": [
                        "ezc.product_common.temp_protect"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "input": {
                    "description": "Temperature sensor driver input id",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Temperature sensor driver input id",
                    "type": "integer"
                },
                "normal_temp": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Device normal operating temperature",
                    "title": "Device normal operating temperature"
                },
                "warn_temp": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Device warning operating temperature",
                    "title": "Device warning operating temperature"
                },
                "protect_temp": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Device protect temperature",
                    "title": "Device protect temperature"
                },
                "normal_behaviors": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Behavior when temperature reaches normal temperature",
                    "title": "Normal behaviors"
                },
                "warn_behaviors": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Behavior when temperature exceeded warning temperature",
                    "title": "Warn behaviors"
                },
                "protect_behaviors": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Behavior when temperature exceeded protect temperature",
                    "title": "Protect behaviors"
                },
                "normal_sample_interval": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "normal sample interval",
                    "title": "normal sample interval"
                },
                "fast_sample_interval": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "fast sample interval when temperature is higher than warn temperature",
                    "title": "fast sample interval"
                },
                "normal_sample_count": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "normal sample count to calculate average temperature",
                    "title": "normal sample count"
                },
                "fast_sample_count": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "fast sample count to calculate average temperature",
                    "title": "fast sample count"
                }
            },
            "required": [
                "type",
                "input"
            ],
            "section": "Product Common",
            "title": "Temperature protect",
            "type": "object"
        },
        "TempSensorNTCDriver": {
            "additionalProperties": false,
            "description": "Applicable if NTC is selected as Temperature Sensor Driver",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.temp_sensor\", \"name\": \"ntc\", \"ntc_config\" : {\"b_value\": 3950,\"r25_ohm\": 10000,\"fixed_ohm\": 10000,\"vdd_mv\": 3300,\"circuit_mode\": 1,\"atten\": 3,\"unit\": 0,\"channel\": 3}}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.temp_sensor",
                    "description": "Driver: ezc.driver.temp_sensor",
                    "enum": [
                        "ezc.driver.temp_sensor"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "ntc",
                    "description": "Driver name: NTC",
                    "enum": [
                        "ntc"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "ntc_config": {
                    "$ref": "#/$defs/NTCCfgTempSensor",
                    "description": "Applicable if NTC is selected",
                    "title": "Temperature Sensor Driver: NTC Configuration"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "ntc_config"
            ],
            "section": "Driver",
            "title": "Temperature Sensor Driver: NTC Driver",
            "type": "object"
        },
        "TempSensorOnChipDriver": {
            "additionalProperties": false,
            "description": "Applicable if OnChip is selected as Temperature Sensor Driver",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.temp_sensor\", \"name\": \"onchip\", \"onchip_config\": {\"range_min\": 50, \"range_max\": 125 }}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.temp_sensor",
                    "description": "Driver: ezc.driver.temp_sensor",
                    "enum": [
                        "ezc.driver.temp_sensor"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "const": "onchip",
                    "description": "Driver name: OnChip",
                    "enum": [
                        "onchip"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "onchip_config": {
                    "$ref": "#/$defs/OnChipCfgTempSensor",
                    "description": "Applicable if OnChip Sensor is selected",
                    "title": "Temperature Sensor Driver: OnChip Configuration"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "onchip_config"
            ],
            "section": "Driver",
            "title": "Temperature Sensor Driver: OnChip Driver",
            "type": "object"
        },
        "TestModeBLE": {
            "additionalProperties": false,
            "description": "BLE related test modes",
            "example": [
                "{\"type\": \"ezc.test_mode.ble\", \"subtype\": 1}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.test_mode.ble",
                    "description": "Test Mode type: ezc.test_mode.ble",
                    "enum": [
                        "ezc.test_mode.ble"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 1,
                    "description": "Test type:\n\u2022 1: Broadcast the MAC address over BLE. This can be helpful to fetch the QR code for the device on the manufacturing line.\n\u2022 Default ssid: test_ble_mac\n\u2022 Default panid: 0x198F\n\u2022 Default mac: 3434343434343434\n\u2022 Default id: 00_01\n\n",
                    "enum": [
                        1
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "trigger": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Test case trigger mechanism:\n\u2022 0: Default: Automatically select Wi-Fi (1) or Thread (2) depending on the hardware.\n\u2022 1: Wi-Fi: Using Wi-Fi network nearby with the specified SSID.\n\u2022 2: Thread: Using a thread network nearby with the specified PANID and MAC.\n\u2022 3: Sniffer: Using the sniffer method where another device is broadcasting the signal nearby with the given ID.",
                    "title": "Trigger Mechanism"
                },
                "ssid": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Wi-Fi SSID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Wi-Fi based devices only.",
                    "title": "SSID"
                },
                "panid": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Thread PANID that the device will search for. If this is found along with the MAC, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Thread based devices only.",
                    "title": "PANID"
                },
                "mac": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Sniffer ID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Sniffer based trigger only.",
                    "title": "ID"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Id"
                }
            },
            "required": [
                "type",
                "subtype"
            ],
            "section": "Test Mode",
            "title": "Test Mode: BLE",
            "type": "object"
        },
        "TestModeCommon": {
            "additionalProperties": false,
            "description": "Common test modes",
            "example": [
                "{\"type\": \"ezc.test_mode.common\", \"subtype\": 1}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.test_mode.common",
                    "description": "Test Mode type: ezc.test_mode.common",
                    "enum": [
                        "ezc.test_mode.common"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "description": "Test type:\n\u2022 1: Set test mode as complete. Do this once all the tests are done. This should be done before the device leaves the factory. Once the test mode is marked as complete, the device will not be able to enter the test mode again.\n\u2022 Default ssid: test_complete\n\u2022 Default panid: 0x198F\n\u2022 Default mac: 1212121212121212\n\u2022 Default id: 00_00\n\n\u2022 2: Boot into the ota_1 partition to perform custom tests. The device should be booted back into the ota_0 partition before the device leaves the factory.\n\u2022 Default ssid: test_ota_1\n\u2022 Default panid: 0x198F\n\u2022 Default mac: 2323232323232323\n\u2022 Default id: 00_03\n\n",
                    "enum": [
                        1,
                        2
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "trigger": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Test case trigger mechanism:\n\u2022 0: Default: Automatically select Wi-Fi (1) or Thread (2) depending on the hardware.\n\u2022 1: Wi-Fi: Using Wi-Fi network nearby with the specified SSID.\n\u2022 2: Thread: Using a thread network nearby with the specified PANID and MAC.\n\u2022 3: Sniffer: Using the sniffer method where another device is broadcasting the signal nearby with the given ID.",
                    "title": "Trigger Mechanism"
                },
                "ssid": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Wi-Fi SSID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Wi-Fi based devices only.",
                    "title": "SSID"
                },
                "panid": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Thread PANID that the device will search for. If this is found along with the MAC, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Thread based devices only.",
                    "title": "PANID"
                },
                "mac": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Sniffer ID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Sniffer based trigger only.",
                    "title": "ID"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Id"
                }
            },
            "required": [
                "type",
                "subtype"
            ],
            "section": "Test Mode",
            "title": "Test Mode: Common",
            "type": "object"
        },
        "TestModeLight": {
            "additionalProperties": false,
            "description": "Light related test modes",
            "example": [
                "{\"type\": \"ezc.test_mode.light\", \"subtype\": 1, \"interval_time_ms\": 2000, \"loop_count\": 2, \"r_time_s\": 1, \"g_time_s\": 2, \"b_time_s\": 3, \"w_time_s\": 4, \"c_time_s\": 5}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.test_mode.light",
                    "description": "Test Mode type: ezc.test_mode.light",
                    "enum": [
                        "ezc.test_mode.light"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "description": "Test type:\n\u2022 1: Light test case 1. The light cycles through different colors.\n\u2022 Default ssid: test_light_1\n\u2022 Default panid: 0x198F\n\u2022 Default mac: 5656565656565656\n\u2022 Default id: 01_01\n\n\u2022 2: Light test case 2. The light cycles through different colors.\n\u2022 Default ssid: test_light_2\n\u2022 Default panid: 0x198F\n\u2022 Default mac: 7878787878787878\n\u2022 Default id: 01_02\n\n\u2022 3: Light test case 3. The light cycles through different colors.\n\u2022 Default ssid: test_light_3\n\u2022 Default panid: 0x198F\n\u2022 Default mac: 9090909090909090\n\u2022 Default id: 01_03\n\n\u2022 4: Light test case 4. The light automatically finish color cycle test and aging test.\n\u2022 Default ssid: test_light_4\n\u2022 Default panid: 0x198F\n\u2022 Default mac: 0A0A0A0A0A0A0A0A\n\u2022 Default id: 01_04\n\n",
                    "enum": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "trigger": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Test case trigger mechanism:\n\u2022 0: Default: Automatically select Wi-Fi (1) or Thread (2) depending on the hardware.\n\u2022 1: Wi-Fi: Using Wi-Fi network nearby with the specified SSID.\n\u2022 2: Thread: Using a thread network nearby with the specified PANID and MAC.\n\u2022 3: Sniffer: Using the sniffer method where another device is broadcasting the signal nearby with the given ID.",
                    "title": "Trigger Mechanism"
                },
                "ssid": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Wi-Fi SSID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Wi-Fi based devices only.",
                    "title": "SSID"
                },
                "panid": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Thread PANID that the device will search for. If this is found along with the MAC, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Thread based devices only.",
                    "title": "PANID"
                },
                "mac": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Sniffer ID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Sniffer based trigger only.",
                    "title": "ID"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Id"
                },
                "interval_time_s": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Interval time (in seconds) between displaying various colors, defualt is 1000ms",
                    "title": "Interval time (in seconds)"
                },
                "loop_count": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The number of cycles, default is 10",
                    "title": "loop count"
                },
                "r_time_s": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The duration for red color to stay displayed (in seconds), default is 10 minutes",
                    "title": "Red time (in seconds)"
                },
                "g_time_s": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The duration for green color to stay displayed (in seconds), default is 10 minutes",
                    "title": "G Time S"
                },
                "b_time_s": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The duration for blue color to stay displayed (in seconds), default is 10 minutes",
                    "title": "blue time (in seconds)"
                },
                "w_time_s": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The duration for warm color to stay displayed (in seconds), default is 10 minutes",
                    "title": "warm time (in seconds)"
                },
                "c_time_s": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The duration for cold color to stay displayed (in seconds), default is 10 minutes",
                    "title": "cold time (in seconds)"
                }
            },
            "required": [
                "type",
                "subtype"
            ],
            "section": "Test Mode",
            "title": "Test Mode: Light",
            "type": "object"
        },
        "TestModeSniffer": {
            "additionalProperties": false,
            "description": "Sniffer related test modes",
            "example": [
                "{\"type\": \"ezc.test_mode.sniffer\", \"subtype\": 1}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.test_mode.sniffer",
                    "description": "Test Mode type: ezc.test_mode.sniffer",
                    "enum": [
                        "ezc.test_mode.sniffer"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 1,
                    "description": "Test type:\n\u2022 1: Broadcast the MAC address using sniffer. This can be helpful to fetch the QR code for the device on the manufacturing line.\n\u2022 Default ssid: test_sniffer_mac\n\u2022 Default panid: 0x198F\n\u2022 Default mac: 4545454545454545\n\u2022 Default id: 00_02\n\n",
                    "enum": [
                        1
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "trigger": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Test case trigger mechanism:\n\u2022 0: Default: Automatically select Wi-Fi (1) or Thread (2) depending on the hardware.\n\u2022 1: Wi-Fi: Using Wi-Fi network nearby with the specified SSID.\n\u2022 2: Thread: Using a thread network nearby with the specified PANID and MAC.\n\u2022 3: Sniffer: Using the sniffer method where another device is broadcasting the signal nearby with the given ID.",
                    "title": "Trigger Mechanism"
                },
                "ssid": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Wi-Fi SSID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Wi-Fi based devices only.",
                    "title": "SSID"
                },
                "panid": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Thread PANID that the device will search for. If this is found along with the MAC, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Thread based devices only.",
                    "title": "PANID"
                },
                "mac": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Sniffer ID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Sniffer based trigger only.",
                    "title": "ID"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Id"
                }
            },
            "required": [
                "type",
                "subtype"
            ],
            "section": "Test Mode",
            "title": "Test Mode: Sniffer",
            "type": "object"
        },
        "TestModeSocket": {
            "additionalProperties": false,
            "description": "Socket related test modes",
            "example": [
                "{\"type\": \"ezc.test_mode.socket\", \"subtype\": 1}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.test_mode.socket",
                    "description": "Test Mode type: ezc.test_mode.socket",
                    "enum": [
                        "ezc.test_mode.socket"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "description": "Test type:\n\u2022 1: All sockets turn on and off, 3 times\n\u2022 Default ssid: test_socket_1\n\u2022 Default panid: 0x198F\n\u2022 Default mac: ABABABABABABABAB\n\u2022 Default id: 02_01\n\n\u2022 2: All sockets change the level from 0 to 100 and back to 0\n\u2022 Default ssid: test_socket_2\n\u2022 Default panid: 0x198F\n\u2022 Default mac: CDCDCDCDCDCDCDCD\n\u2022 Default id: 02_02\n\n",
                    "enum": [
                        1,
                        2
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "trigger": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Test case trigger mechanism:\n\u2022 0: Default: Automatically select Wi-Fi (1) or Thread (2) depending on the hardware.\n\u2022 1: Wi-Fi: Using Wi-Fi network nearby with the specified SSID.\n\u2022 2: Thread: Using a thread network nearby with the specified PANID and MAC.\n\u2022 3: Sniffer: Using the sniffer method where another device is broadcasting the signal nearby with the given ID.",
                    "title": "Trigger Mechanism"
                },
                "ssid": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Wi-Fi SSID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Wi-Fi based devices only.",
                    "title": "SSID"
                },
                "panid": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Thread PANID that the device will search for. If this is found along with the MAC, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Thread based devices only.",
                    "title": "PANID"
                },
                "mac": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Sniffer ID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Sniffer based trigger only.",
                    "title": "ID"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Id"
                }
            },
            "required": [
                "type",
                "subtype"
            ],
            "section": "Test Mode",
            "title": "Test Mode: Socket",
            "type": "object"
        },
        "TestModeWindowCovering": {
            "additionalProperties": false,
            "description": "Window covering related test modes",
            "example": [
                "{\"type\": \"ezc.test_mode.window_covering\", \"subtype\": 1}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.test_mode.window_covering",
                    "description": "Test Mode type: ezc.test_mode.window_covering",
                    "enum": [
                        "ezc.test_mode.window_covering"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "subtype": {
                    "const": 1,
                    "description": "Test type:\n\u2022 1: The window covering moves up and down alternatively, 3 times.\n\u2022 Default ssid: test_window_covering_1\n\u2022 Default panid: 0x198F\n\u2022 Default mac: EFEFEFEFEFEFEFEF\n\u2022 Default id: 03_01\n\n",
                    "enum": [
                        1
                    ],
                    "title": "Subtype",
                    "type": "integer"
                },
                "trigger": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Test case trigger mechanism:\n\u2022 0: Default: Automatically select Wi-Fi (1) or Thread (2) depending on the hardware.\n\u2022 1: Wi-Fi: Using Wi-Fi network nearby with the specified SSID.\n\u2022 2: Thread: Using a thread network nearby with the specified PANID and MAC.\n\u2022 3: Sniffer: Using the sniffer method where another device is broadcasting the signal nearby with the given ID.",
                    "title": "Trigger Mechanism"
                },
                "ssid": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Wi-Fi SSID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Wi-Fi based devices only.",
                    "title": "SSID"
                },
                "panid": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Thread PANID that the device will search for. If this is found along with the MAC, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Thread based devices only.",
                    "title": "PANID"
                },
                "mac": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Sniffer ID that the device will search for. If this is found, the test mode is triggered. If not specified, the default for the test mode will be used. This is applicable for Sniffer based trigger only.",
                    "title": "ID"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Id"
                }
            },
            "required": [
                "type",
                "subtype"
            ],
            "section": "Test Mode",
            "title": "Test Mode: Window Covering",
            "type": "object"
        },
        "WS2812Cfg": {
            "additionalProperties": false,
            "description": "WS2812 LED driver extra configurations",
            "example": [
                "{\"ws2812_config\": {\"led_num\": 1, \"ctrl_io\": 8}}"
            ],
            "properties": {
                "led_num": {
                    "description": "Number of LEDs",
                    "minimum": 1,
                    "title": "Number of LEDs",
                    "type": "integer"
                },
                "ctrl_io": {
                    "description": "Data signal pin. Range of values depends on the chip",
                    "minimum": 0,
                    "title": "Control IO",
                    "type": "integer"
                }
            },
            "required": [
                "led_num",
                "ctrl_io"
            ],
            "title": "Light Driver: WS2812 LED Driver: Configurations",
            "type": "object"
        },
        "WindowCovering": {
            "additionalProperties": false,
            "description": "Window covering description and configurations",
            "example": [
                "{\"type\":\"ezc.product.window_covering\",\"subtype\":1,\"driver\":{\"output\":1002,\"input_up\":1000,\"input_down\":1001},\"data_model\":{\"window_covering_type\":1}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product.window_covering",
                    "description": "Product window covering: `ezc.product.window_covering`",
                    "enum": [
                        "ezc.product.window_covering"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "description": "Product ID to distinguish between different products. Should be unique for each product",
                    "title": "Product ID"
                },
                "subtype": {
                    "description": "1: Position aware lift",
                    "maximum": 1,
                    "minimum": 1,
                    "title": "Subtype",
                    "type": "integer"
                },
                "driver": {
                    "$ref": "#/$defs/product__product__WindowCovering__Driver",
                    "description": "Window covering driver configurations",
                    "title": "Window Covering: Driver Configurations"
                },
                "data_model": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DataModel"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Window covering datamodel configuration for product",
                    "title": "Window Covering: Data Model"
                }
            },
            "required": [
                "type",
                "subtype",
                "driver"
            ],
            "title": "Window Covering",
            "type": "object"
        },
        "WindowCoveringCalibration": {
            "additionalProperties": false,
            "description": "Calibration for window covering can be triggered with this",
            "example": [
                "{\"type\": \"ezc.product_common.window_covering_calibration\", \"driver\": {\"enter_calibration\": [1000],\"enter_cali_input_trigger_type\": 0}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.window_covering_calibration",
                    "description": "Product Common type: ezc.product_common.window_covering_calibration",
                    "enum": [
                        "ezc.product_common.window_covering_calibration"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "driver": {
                    "$ref": "#/$defs/product_common__product_common__WindowCoveringCalibration__Driver",
                    "description": "Driver details for window covering calibration",
                    "title": "Window Covering Calibration: Driver Configurations"
                }
            },
            "required": [
                "type",
                "driver"
            ],
            "section": "Product Common",
            "title": "Window Covering Calibration",
            "type": "object"
        },
        "WindowCoveringConfig": {
            "additionalProperties": false,
            "description": "Window covering related common configurations",
            "example": [
                "{\"type\": \"ezc.product_common.window_covering_config\", \"window_covering_config\": {\"set_defaults_when_poweron\": true, \"indicator_off_end\": true, \"stop_indicator_off_delay_time_ms\": 1000, \"update_driver\": true}}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.window_covering_config",
                    "description": "Product Common type: ezc.product_common.window_covering_config",
                    "enum": [
                        "ezc.product_common.window_covering_config"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "window_covering_config": {
                    "Strict": true,
                    "allOf": [
                        {
                            "$ref": "#/$defs/Config"
                        }
                    ],
                    "description": "Window covering related common configurations",
                    "title": "Window Covering Common Configurations: Details"
                }
            },
            "required": [
                "type",
                "window_covering_config"
            ],
            "section": "Product Common",
            "title": "Window Covering Common Configurations",
            "type": "object"
        },
        "ZeroDetect": {
            "additionalProperties": false,
            "description": "Zero Detect configuration. This is an optional configuration.",
            "example": [
                "{\"type\": \"ezc.product_common.zero_detect\", \"driver\": { \"zero_detect\": 1005, \"invalid_behaviors\": 0, \"lost_signal\": 0 }}"
            ],
            "properties": {
                "type": {
                    "const": "ezc.product_common.zero_detect",
                    "description": "Product Common type: ezc.product_common.zero_detect. Devices with zero-crossing detection functionality should have corresponding configurations.",
                    "enum": [
                        "ezc.product_common.zero_detect"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "driver": {
                    "$ref": "#/$defs/product_common__product_common__ZeroDetect__Driver",
                    "description": "Driver details for Zero Detect",
                    "title": "Zero Detect: Driver Configurations"
                }
            },
            "required": [
                "type",
                "driver"
            ],
            "section": "Product Common",
            "title": "Zero Detect",
            "type": "object"
        },
        "ZeroDetectDriver": {
            "additionalProperties": false,
            "description": "ZeroDetect driver to capture Zero-Cross signal",
            "example": [
                "{\"id\": 1000, \"type\": \"ezc.driver.zero_detect\", \"name\": \"gpio\", \"capture_gpio_num\": 6, \"zero_signal_type\": 1, \"max_freq_hz\": 65, \"min_freq_hz\": 45, \"valid_times\": 6, \"invalid_times\": 20, \"signal_lost_time_us\": 100000}"
            ],
            "properties": {
                "id": {
                    "description": "This must be unique for each driver object created. Make sure to use the correct Driver ID in the other sections.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "ID",
                    "type": "integer"
                },
                "type": {
                    "const": "ezc.driver.zero_detect",
                    "description": "Driver: ezc.driver.zero_detect",
                    "enum": [
                        "ezc.driver.zero_detect"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "name": {
                    "description": "ZeroDetect subtype",
                    "enum": [
                        "gpio",
                        "mcpwm"
                    ],
                    "title": "ZeroDetect name",
                    "type": "string"
                },
                "capture_gpio_num": {
                    "description": "Input GPIO for the driver. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "GPIO pin number",
                    "type": "integer"
                },
                "zero_signal_type": {
                    "description": "Zero-crossing signal types include pulse and square wave.",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Zero Signal Type",
                    "type": "integer"
                },
                "max_freq_hz": {
                    "description": "Support Maximum Frequency of Zero-Cross Detection Signal.",
                    "maximum": 200,
                    "minimum": 10,
                    "title": "Support max frequency",
                    "type": "integer"
                },
                "min_freq_hz": {
                    "description": "Support Minimum Frequency of Zero-Cross Detection Signal.",
                    "maximum": 200,
                    "minimum": 10,
                    "title": "Support min frequency",
                    "type": "integer"
                },
                "valid_times": {
                    "description": "When the zero-cross detection signal is within the frequency range, it will be considered as a valid signal if it occurs more than X times.",
                    "maximum": 200,
                    "minimum": 0,
                    "title": "Threshold for determining the validity of zero-crossing signals.",
                    "type": "integer"
                },
                "invalid_times": {
                    "description": "When the zero-cross detection signal is without the frequency range, it will be considered as a in-valid signal if it occurs more than X times.",
                    "maximum": 200,
                    "minimum": 0,
                    "title": "Threshold for determining the in-validity of zero-crossing signals.",
                    "type": "integer"
                },
                "signal_lost_time_us": {
                    "description": "Timeout duration for determining signal loss.",
                    "maximum": 18446744073709551615,
                    "minimum": 1,
                    "title": "Timeout duration for determining signal loss",
                    "type": "integer"
                }
            },
            "required": [
                "id",
                "type",
                "name",
                "capture_gpio_num",
                "zero_signal_type",
                "max_freq_hz",
                "min_freq_hz",
                "valid_times",
                "invalid_times",
                "signal_lost_time_us"
            ],
            "section": "Driver",
            "title": "ZeroDetect Driver",
            "type": "object"
        },
        "led_GPIOCfg": {
            "additionalProperties": false,
            "description": "Applicable if gpio is selected",
            "example": [
                "{\"gpio_config\": {\"gpio_num\": 10,\"active_level\": 0}}"
            ],
            "properties": {
                "gpio_num": {
                    "description": "Output GPIO for the driver. Range of values depend on the chip",
                    "minimum": 0,
                    "title": "Light Output GPIO",
                    "type": "integer"
                },
                "active_level": {
                    "description": "When is the output turned on\n\u2022 0: The output is on when it connected to GND\n\u2022 1: The output is on when it connected to VCC\n",
                    "enum": [
                        0,
                        1
                    ],
                    "title": "Light Active Level",
                    "type": "integer"
                }
            },
            "required": [
                "gpio_num",
                "active_level"
            ],
            "title": "Light Driver: GPIO LED Driver: Configurations",
            "type": "object"
        },
        "product__product__LightBaseModel__Driver": {
            "additionalProperties": false,
            "description": "Driver details for light",
            "example": [
                "{\"driver\":{\"output\":1000}}"
            ],
            "properties": {
                "input": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Input ID for light driver",
                    "title": "Input ID"
                },
                "input_mode": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Input driver mode\n\u2022 0: Push Button\n\u2022 1: Rocker Switch\n",
                    "title": "Input Mode"
                },
                "input_trigger_type": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "When to trigger the input:\n\u2022 0: Press Down\n\u2022 1: Press Up\n\u2022 2: Repeat Press\n\u2022 3: Repeat Press Release\n\u2022 4: Single Click\n\u2022 5: Double Click\n\u2022 6: Long Press Start\n\u2022 7: Long Press Hold\n\n",
                    "title": "Input Trigger Type"
                },
                "output": {
                    "description": "Output ID for light driver",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Output ID",
                    "type": "integer"
                }
            },
            "required": [
                "output"
            ],
            "title": "Light: Driver Configurations",
            "type": "object"
        },
        "product__product__SocketBaseModel__Driver": {
            "additionalProperties": false,
            "description": "Socket driver input and output configurations",
            "example": [
                "{\"driver\":{\"input\":1000,\"input_mode\":1,\"input_trigger_type\":1,\"output\":1001,\"indicator\":1002}}"
            ],
            "properties": {
                "input": {
                    "description": "Input driver ID",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Input",
                    "type": "integer"
                },
                "input_mode": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Input driver mode\n\u2022 0: Push Button\n\u2022 1: Rocker Switch\n",
                    "title": "Input Mode"
                },
                "input_trigger_type": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Input trigger type\n\u2022 0: trigger when input/button Press Down\n\u2022 1: trigger when input/button Press Up\n\u2022 2: trigger when input/button Repeat Press\n\u2022 3: trigger when input/button Repeat Press release\n\u2022 4: trigger when input/button single click\n\u2022 5: trigger when input/button double click\n\u2022 6: trigger when input/button long press start\n\u2022 7: trigger when input/button long press hold\n\u2022 8: trigger on/off when rocker switch is pressed\n\u2022 9: trigger toggle when rocker switch is pressed\n",
                    "title": "Input Trigger Type"
                },
                "alternative_input": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Alternative Input driver ID",
                    "title": "Alternative Input"
                },
                "alternative_input_mode": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Alternative Input driver mode\n\u2022 0: Push Button\n\u2022 1: Rocker Switch\n",
                    "title": "Alternative Input Mode"
                },
                "alternative_input_trigger_type": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Alternative Input trigger type\n\u2022 0: trigger when input/button Press Down\n\u2022 1: trigger when input/button Press Up\n\u2022 2: trigger when input/button Repeat Press\n\u2022 3: trigger when input/button Repeat Press release\n\u2022 4: trigger when input/button single click\n\u2022 5: trigger when input/button double click\n\u2022 6: trigger when input/button long press start\n\u2022 7: trigger when input/button long press hold\n\u2022 8: trigger on/off when rocker switch is pressed\n\u2022 9: trigger toggle when rocker switch is pressed\n",
                    "title": "Alternative Input Trigger Type"
                },
                "output": {
                    "description": "Output driver ID",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Output",
                    "type": "integer"
                },
                "indicator": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Indicator driver ID",
                    "title": "Indicator"
                },
                "feedback_signal_input": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Feedback Signal Input"
                },
                "hosted": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Whether the product is hosted or not\n\u2022 true: hosted product\n\u2022 false: non-hosted product",
                    "title": "Hosted"
                }
            },
            "required": [
                "input",
                "output"
            ],
            "title": "Socket: Driver Configurations",
            "type": "object"
        },
        "product__product__Switch__Driver": {
            "additionalProperties": false,
            "description": "Driver configurations for switch",
            "example": [
                "{\"driver\":{\"input\":1000}}"
            ],
            "properties": {
                "input": {
                    "description": "Input driver ID",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Input",
                    "type": "integer"
                },
                "indicator": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Indicator output ID",
                    "title": "Indicator"
                },
                "hosted": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Whether the product is hosted or not\n\u2022 true: hosted product\n\u2022 false: non-hosted product",
                    "title": "Hosted"
                }
            },
            "required": [
                "input"
            ],
            "title": "Switch: Driver Configurations",
            "type": "object"
        },
        "product__product__WindowCovering__Driver": {
            "additionalProperties": false,
            "description": "Window covering driver configurations",
            "example": [
                "{\"driver\":{\"output\":1002,\"input_up\":1000,\"input_down\":1001}}"
            ],
            "properties": {
                "output": {
                    "description": "Output Driver ID",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Output ID",
                    "type": "integer"
                },
                "input_up": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Input driver ID for up motion",
                    "title": "Input Up ID"
                },
                "input_down": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Input driver ID for down motion",
                    "title": "Input Down ID"
                },
                "input_stop": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Input driver ID to stop the motion",
                    "title": "Input Stop ID"
                },
                "indicator_up": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Output driver ID for indicating up motion",
                    "title": "Up Indicator ID"
                },
                "indicator_down": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Output driver ID for indicating down motion",
                    "title": "Down Indicator ID"
                },
                "indicator_stop": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Output driver ID for indicating stop motion",
                    "title": "Stop Indicator ID"
                },
                "hosted": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Whether the product is hosted or not\n\u2022 true: hosted product\n\u2022 false: non-hosted product",
                    "title": "Hosted"
                }
            },
            "required": [
                "output"
            ],
            "title": "Window Covering: Driver Configurations",
            "type": "object"
        },
        "product_common__product_common__BackLight__Driver": {
            "additionalProperties": false,
            "description": "Driver details for back light.",
            "example": [
                "{\"driver\": {\"input\": 1011, \"input_trigger_type\": 1, \"indicator\": 1008}}"
            ],
            "properties": {
                "input": {
                    "description": "Input Driver ID for back light.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Input",
                    "type": "integer"
                },
                "indicator": {
                    "description": "Indicator Driver ID for back light.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Indicator",
                    "type": "integer"
                },
                "input_trigger_type": {
                    "description": "When to trigger the input:\n\u2022 0: Press Down\n\u2022 1: Press Up\n\u2022 2: Repeat Press\n\u2022 3: Repeat Press Release\n\u2022 4: Single Click\n\u2022 5: Double Click\n\u2022 6: Long Press Start\n\u2022 7: Long Press Hold\n\n",
                    "maximum": 7,
                    "minimum": 0,
                    "title": "Input Trigger Type",
                    "type": "integer"
                },
                "exclude_button": {
                    "anyOf": [
                        {
                            "items": {
                                "maximum": 1999,
                                "minimum": 1000,
                                "type": "integer"
                            },
                            "type": "array",
                            "uniqueItems": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List of driver IDs with which the input driver ID should not work together. Example: When an exclude button is pressed and the trigger input button is also pressed, the action should not be performed.",
                    "title": "Exclude Button"
                }
            },
            "required": [
                "input",
                "indicator",
                "input_trigger_type"
            ],
            "title": "Back Light: Driver Configurations",
            "type": "object"
        },
        "product_common__product_common__IndicatorNonHosted__Driver": {
            "additionalProperties": false,
            "description": "Driver details for indicator.",
            "example": [
                "{\"driver\": {\"output\": 1000}}"
            ],
            "properties": {
                "output": {
                    "description": "Output Driver ID for indicator.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Output",
                    "type": "integer"
                }
            },
            "required": [
                "output"
            ],
            "title": "Indicator: Driver Configurations",
            "type": "object"
        },
        "product_common__product_common__LightConfig__Driver": {
            "additionalProperties": false,
            "description": "Light related common configurations",
            "example": [
                "{\"light_config\": {\"switch_fade\": false, \"color_fade\": true}}"
            ],
            "properties": {
                "switch_fade": {
                    "description": "Whether to enable the fade when the power state of the device changes.",
                    "title": "Switch Fade",
                    "type": "boolean"
                },
                "color_fade": {
                    "description": "Whether to enable the fade when the color/brightness state of the device changes.",
                    "title": "Color Fade",
                    "type": "boolean"
                }
            },
            "required": [
                "switch_fade",
                "color_fade"
            ],
            "title": "Light Common Configurations: Details",
            "type": "object"
        },
        "product_common__product_common__SocketInputMode__Driver": {
            "additionalProperties": false,
            "description": "Driver details for socket input mode",
            "example": [
                "{\"driver\": {\"input\": 1000}}"
            ],
            "properties": {
                "input": {
                    "description": "Input Driver ID for changing the socket input.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Input",
                    "type": "integer"
                }
            },
            "required": [
                "input"
            ],
            "title": "Socket Input Mode: Driver Configurations",
            "type": "object"
        },
        "product_common__product_common__SocketPower__Driver": {
            "additionalProperties": false,
            "description": "Driver details for socket power",
            "example": [
                "{\"driver\": {\"input\": 1002, \"indicator\": 1003}}"
            ],
            "properties": {
                "input": {
                    "description": "Input Driver ID for socket power.",
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Input",
                    "type": "integer"
                },
                "input_mode": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "What is the type of input:\n\u2022 0: Push Button\n\u2022 1: Rocker Switch\n",
                    "title": "Input driver mode"
                },
                "input_trigger_type": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "When to trigger the input:\n\u2022 0: Press Down\n\u2022 1: Press Up\n\u2022 2: Repeat Press\n\u2022 3: Repeat Press Release\n\u2022 4: Single Click\n\u2022 5: Double Click\n\u2022 6: Long Press Start\n\u2022 7: Long Press Hold\n\n",
                    "title": "Input Trigger Type"
                },
                "indicator": {
                    "anyOf": [
                        {
                            "maximum": 1999,
                            "minimum": 1000,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Indicator Driver ID for socket power.",
                    "title": "Indicator"
                }
            },
            "required": [
                "input"
            ],
            "title": "Socket Power: Driver Configurations",
            "type": "object"
        },
        "product_common__product_common__WindowCoveringCalibration__Driver": {
            "additionalProperties": false,
            "description": "Driver details for window covering calibration",
            "example": [
                "{\"driver\": {\"enter_calibration\": [1000],\"enter_cali_input_trigger_type\": 0}}"
            ],
            "properties": {
                "enter_cali_input_trigger_type": {
                    "description": "When to trigger the input:\n\u2022 0: Press Down\n\u2022 6: Long Press Start\n\n",
                    "enum": [
                        0,
                        6
                    ],
                    "title": "Enter Calibration Input Trigger Type",
                    "type": "integer"
                },
                "enter_calibration": {
                    "description": "List of Input Driver IDs to enter calibration mode. If multiple are give, all of them need to be pressed together.",
                    "items": {
                        "maximum": 1999,
                        "minimum": 1000,
                        "type": "integer"
                    },
                    "title": "Enter Calibration Mode Input",
                    "type": "array",
                    "uniqueItems": true
                },
                "enter_cali_exclude_button": {
                    "anyOf": [
                        {
                            "items": {
                                "maximum": 1999,
                                "minimum": 1000,
                                "type": "integer"
                            },
                            "type": "array",
                            "uniqueItems": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List of driver IDs with which the input driver ID should not work together. Example: When an exclude button is pressed and the trigger input button is also pressed, the action should not be performed.",
                    "title": "Enter Calibration Exclude Button"
                },
                "restore_default_input_trigger_type": {
                    "anyOf": [
                        {
                            "enum": [
                                0,
                                6
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "When to trigger the input:\n\u2022 0: Press Down\n\u2022 6: Long Press Start\n\n",
                    "title": "Restore Default Input Trigger Type"
                },
                "restore_default": {
                    "anyOf": [
                        {
                            "items": {
                                "maximum": 1999,
                                "minimum": 1000,
                                "type": "integer"
                            },
                            "type": "array",
                            "uniqueItems": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List of Input Driver IDs to restore the default calibration. If multiple are give, all of them need to be pressed together.",
                    "title": "Restore Default Input"
                },
                "restore_default_exclude_button": {
                    "anyOf": [
                        {
                            "items": {
                                "maximum": 1999,
                                "minimum": 1000,
                                "type": "integer"
                            },
                            "type": "array",
                            "uniqueItems": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List of driver IDs with which the input driver ID should not work together. Example: When an exclude button is pressed and the trigger input button is also pressed, the action should not be performed.",
                    "title": "Restore Default Exclude Button"
                }
            },
            "required": [
                "enter_cali_input_trigger_type",
                "enter_calibration"
            ],
            "title": "Window Covering Calibration: Driver Configurations",
            "type": "object"
        },
        "product_common__product_common__ZeroDetect__Driver": {
            "additionalProperties": false,
            "description": "Driver details for Zero Detect",
            "example": [
                "{\"driver\": { \"zero_detect\": 1005, \"invalid_behaviors\": 0, \"lost_signal\": 0 }}"
            ],
            "properties": {
                "zero_detect": {
                    "maximum": 1999,
                    "minimum": 1000,
                    "title": "Zero Detect",
                    "type": "integer"
                },
                "invalid_behaviors": {
                    "description": "Behavior when the signal is invalid.",
                    "maximum": 3,
                    "minimum": 0,
                    "title": "Invalid Behaviors",
                    "type": "integer"
                },
                "lost_signal": {
                    "description": "Behavior when the signal is lost.",
                    "maximum": 3,
                    "minimum": 0,
                    "title": "Lost Signal Behaviors",
                    "type": "integer"
                }
            },
            "required": [
                "zero_detect",
                "invalid_behaviors",
                "lost_signal"
            ],
            "title": "Zero Detect: Driver Configurations",
            "type": "object"
        }
    },
    "additionalProperties": false,
    "description": "The ZeroCode Product Configurations is divided into the following sections:\n\u2022 **Pre Driver:** These are things which are initialised even before the device drivers are initialised. This is done at the very start of the bootup. This includes power related and communication related initialisations.\n\u2022 **Driver:** The drivers are initialised at this stage. This include the lower level drivers like, button, LED, etc. They are then used/linked later in the configuration based on their Driver IDs.\n\u2022 **Product Common:** This includes things which are common to the product as a whole. The drivers which are initialised before are used here.\n\u2022 **Product:** This represents the actual product and how it is shown in the Ecosystems. Example, to create a 2 channel socket, the socket must be present 2 times here. The drivers which are initialised before are used here.\n\u2022 **Test Mode:** These initialise the test modes that can be performed in the factory during manufacturing. If enabled, they need to be marked as completed before the device leaves the factory. Until then, the device checks for the trigger for the test modes on bootup.\n",
    "example": [
        "{\"config_version\":3,\"driver\":[{\"id\":1000,\"type\":\"ezc.driver.button\",\"name\":\"gpio\",\"gpio_config\":{\"gpio_num\":9,\"active_level\":0,\"long_press_time\":5}},{\"id\":1001,\"type\":\"ezc.driver.relay\",\"name\":\"gpio\",\"gpio_config\":{\"gpio_num\":10,\"active_level\":0}},{\"id\":1002,\"type\":\"ezc.driver.led\",\"name\":\"gpio\",\"gpio_config\":{\"gpio_num\":8,\"active_level\":0}}],\"product_common\":[{\"type\":\"ezc.product_common.indicator\",\"driver\":{\"output\":1002},\"events\":[{\"name\":\"setup_mode_start\",\"mode\":\"blink\",\"speed\":4000,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":0},{\"name\":\"setup_started\",\"mode\":\"blink\",\"speed\":1000,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":0},{\"name\":\"setup_successful\",\"mode\":\"restore\"},{\"name\":\"setup_failed\",\"mode\":\"restore\"},{\"name\":\"setup_mode_end\",\"mode\":\"restore\"},{\"name\":\"ready\",\"mode\":\"restore\"},{\"name\":\"identification_start\",\"mode\":\"blink\",\"speed\":1000,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":0},{\"name\":\"identification_stop\",\"mode\":\"restore\"},{\"name\":\"identification_blink\",\"mode\":\"blink\",\"speed\":1000,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":1000},{\"name\":\"identification_breathe\",\"mode\":\"blink\",\"speed\":1000,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":15000},{\"name\":\"identification_okay\",\"mode\":\"blink\",\"speed\":700,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":1400},{\"name\":\"identification_channel_change\",\"mode\":\"blink\",\"speed\":8000,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":8000},{\"name\":\"identification_finish_effect\",\"mode\":\"restore\"},{\"name\":\"identification_stop_effect\",\"mode\":\"restore\"},{\"name\":\"factory_reset_triggered\",\"mode\":\"blink\",\"speed\":400,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":0},{\"name\":\"forced_rollback_triggered\",\"mode\":\"blink\",\"speed\":400,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":0},{\"name\":\"driver_mode\",\"mode\":\"blink\",\"speed\":1000,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":0},{\"name\":\"test_mode_start\",\"mode\":\"blink\",\"speed\":500,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":1500},{\"name\":\"test_mode_complete\",\"mode\":\"blink\",\"speed\":500,\"color_select\":2,\"cct\":50,\"min_brightness\":20,\"max_brightness\":100,\"total_ms\":3000}]},{\"type\":\"ezc.product_common.factory_reset\",\"subtype\":2,\"driver\":{\"input\":1000},\"auto_trigger\":true}],\"product\":[{\"type\":\"ezc.product.socket\",\"subtype\":1,\"driver\":{\"input\":1000,\"output\":1001,\"indicator\":1002},\"data_model\":{\"power_default\":1,\"power_bootup\":-1}}],\"test_mode\":[{\"type\":\"ezc.test_mode.common\",\"subtype\":1},{\"type\":\"ezc.test_mode.ble\",\"subtype\":1},{\"type\":\"ezc.test_mode.socket\",\"subtype\":1}]}"
    ],
    "properties": {
        "config_version": {
            "const": 3,
            "description": "Product configuration version",
            "enum": [
                3
            ],
            "title": "Config Version",
            "type": "integer"
        },
        "pre_driver": {
            "anyOf": [
                {
                    "items": {
                        "discriminator": {
                            "mapping": {
                                "ezc.pre_driver.hosted_uart": "#/$defs/HostedUart",
                                "ezc.pre_driver.log_output": "#/$defs/LogOutput",
                                "ezc.pre_driver.power_management": "#/$defs/PowerManagement"
                            },
                            "propertyName": "type"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/LogOutput"
                            },
                            {
                                "$ref": "#/$defs/PowerManagement"
                            },
                            {
                                "$ref": "#/$defs/HostedUart"
                            }
                        ],
                        "title": "Pre Driver"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                {
                    "type": "null"
                }
            ],
            "default": null,
            "description": "Peripheral settings required before initialising the drivers",
            "title": "Pre Driver"
        },
        "driver": {
            "description": "Contains the Driver specifications",
            "items": {
                "discriminator": {
                    "mapping": {
                        "ezc.driver.button": {
                            "discriminator": {
                                "mapping": {
                                    "adc": "#/$defs/ButtonADCDriver",
                                    "gpio": "#/$defs/ButtonGPIODriver",
                                    "hosted": "#/$defs/ButtonHostedDriver"
                                },
                                "propertyName": "name"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/$defs/ButtonGPIODriver"
                                },
                                {
                                    "$ref": "#/$defs/ButtonADCDriver"
                                },
                                {
                                    "$ref": "#/$defs/ButtonHostedDriver"
                                }
                            ],
                            "title": "ButtonDriver"
                        },
                        "ezc.driver.led": {
                            "discriminator": {
                                "mapping": {
                                    "bp1658cj": "#/$defs/LedDriverBP1658CJ",
                                    "bp5758d": "#/$defs/LedDriverBP5758D",
                                    "gpio": "#/$defs/LedDriverGPIO",
                                    "pwm": "#/$defs/LedDriverPWM",
                                    "sm2135e": "#/$defs/LedDriverSM2135E",
                                    "sm2135eh": "#/$defs/LedDriverSM2135EH",
                                    "sm2235egh": "#/$defs/LedDriverSM2235EGH",
                                    "sm2335egh": "#/$defs/LedDriverSM2335EGH",
                                    "ws2812": "#/$defs/LedDriverWS2812"
                                },
                                "propertyName": "name"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/$defs/LedDriverWS2812"
                                },
                                {
                                    "$ref": "#/$defs/LedDriverPWM"
                                },
                                {
                                    "$ref": "#/$defs/LedDriverBP5758D"
                                },
                                {
                                    "$ref": "#/$defs/LedDriverBP1658CJ"
                                },
                                {
                                    "$ref": "#/$defs/LedDriverSM2135E"
                                },
                                {
                                    "$ref": "#/$defs/LedDriverSM2135EH"
                                },
                                {
                                    "$ref": "#/$defs/LedDriverSM2235EGH"
                                },
                                {
                                    "$ref": "#/$defs/LedDriverSM2335EGH"
                                },
                                {
                                    "$ref": "#/$defs/LedDriverGPIO"
                                }
                            ],
                            "title": "LedDriver"
                        },
                        "ezc.driver.relay": {
                            "discriminator": {
                                "mapping": {
                                    "gpio": "#/$defs/RelayGPIODriver",
                                    "hosted": "#/$defs/RelayHostedDriver"
                                },
                                "propertyName": "name"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/$defs/RelayGPIODriver"
                                },
                                {
                                    "$ref": "#/$defs/RelayHostedDriver"
                                }
                            ],
                            "title": "RelayDriver"
                        },
                        "ezc.driver.roller_blind": {
                            "discriminator": {
                                "mapping": {
                                    "gpio": "#/$defs/RollerBlindGPIODriver",
                                    "hosted": "#/$defs/RollerBlindHostedDriver"
                                },
                                "propertyName": "name"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/$defs/RollerBlindGPIODriver"
                                },
                                {
                                    "$ref": "#/$defs/RollerBlindHostedDriver"
                                }
                            ],
                            "title": "RollerBlindDriver"
                        },
                        "ezc.driver.temp_sensor": {
                            "discriminator": {
                                "mapping": {
                                    "ntc": "#/$defs/TempSensorNTCDriver",
                                    "onchip": "#/$defs/TempSensorOnChipDriver"
                                },
                                "propertyName": "name"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/$defs/TempSensorOnChipDriver"
                                },
                                {
                                    "$ref": "#/$defs/TempSensorNTCDriver"
                                }
                            ],
                            "title": "TempSensorDriver"
                        },
                        "ezc.driver.zero_detect": "#/$defs/ZeroDetectDriver"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "discriminator": {
                            "mapping": {
                                "adc": "#/$defs/ButtonADCDriver",
                                "gpio": "#/$defs/ButtonGPIODriver",
                                "hosted": "#/$defs/ButtonHostedDriver"
                            },
                            "propertyName": "name"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/ButtonGPIODriver"
                            },
                            {
                                "$ref": "#/$defs/ButtonADCDriver"
                            },
                            {
                                "$ref": "#/$defs/ButtonHostedDriver"
                            }
                        ],
                        "title": "ButtonDriver"
                    },
                    {
                        "discriminator": {
                            "mapping": {
                                "gpio": "#/$defs/RelayGPIODriver",
                                "hosted": "#/$defs/RelayHostedDriver"
                            },
                            "propertyName": "name"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/RelayGPIODriver"
                            },
                            {
                                "$ref": "#/$defs/RelayHostedDriver"
                            }
                        ],
                        "title": "RelayDriver"
                    },
                    {
                        "discriminator": {
                            "mapping": {
                                "gpio": "#/$defs/RollerBlindGPIODriver",
                                "hosted": "#/$defs/RollerBlindHostedDriver"
                            },
                            "propertyName": "name"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/RollerBlindGPIODriver"
                            },
                            {
                                "$ref": "#/$defs/RollerBlindHostedDriver"
                            }
                        ],
                        "title": "RollerBlindDriver"
                    },
                    {
                        "discriminator": {
                            "mapping": {
                                "bp1658cj": "#/$defs/LedDriverBP1658CJ",
                                "bp5758d": "#/$defs/LedDriverBP5758D",
                                "gpio": "#/$defs/LedDriverGPIO",
                                "pwm": "#/$defs/LedDriverPWM",
                                "sm2135e": "#/$defs/LedDriverSM2135E",
                                "sm2135eh": "#/$defs/LedDriverSM2135EH",
                                "sm2235egh": "#/$defs/LedDriverSM2235EGH",
                                "sm2335egh": "#/$defs/LedDriverSM2335EGH",
                                "ws2812": "#/$defs/LedDriverWS2812"
                            },
                            "propertyName": "name"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/LedDriverWS2812"
                            },
                            {
                                "$ref": "#/$defs/LedDriverPWM"
                            },
                            {
                                "$ref": "#/$defs/LedDriverBP5758D"
                            },
                            {
                                "$ref": "#/$defs/LedDriverBP1658CJ"
                            },
                            {
                                "$ref": "#/$defs/LedDriverSM2135E"
                            },
                            {
                                "$ref": "#/$defs/LedDriverSM2135EH"
                            },
                            {
                                "$ref": "#/$defs/LedDriverSM2235EGH"
                            },
                            {
                                "$ref": "#/$defs/LedDriverSM2335EGH"
                            },
                            {
                                "$ref": "#/$defs/LedDriverGPIO"
                            }
                        ],
                        "title": "LedDriver"
                    },
                    {
                        "$ref": "#/$defs/ZeroDetectDriver"
                    },
                    {
                        "discriminator": {
                            "mapping": {
                                "ntc": "#/$defs/TempSensorNTCDriver",
                                "onchip": "#/$defs/TempSensorOnChipDriver"
                            },
                            "propertyName": "name"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/TempSensorOnChipDriver"
                            },
                            {
                                "$ref": "#/$defs/TempSensorNTCDriver"
                            }
                        ],
                        "title": "TempSensorDriver"
                    }
                ]
            },
            "minItems": 1,
            "title": "Driver",
            "type": "array",
            "uniqueItems": true
        },
        "product_common": {
            "description": "Common product configurations",
            "items": {
                "discriminator": {
                    "mapping": {
                        "ezc.product_common.advertise_mac": "#/$defs/AdvertiseMac",
                        "ezc.product_common.back_light": "#/$defs/BackLight",
                        "ezc.product_common.factory_reset": {
                            "discriminator": {
                                "mapping": {
                                    "1": "#/$defs/FactoryResetOnOff",
                                    "2": "#/$defs/FactoryResetLongPress",
                                    "3": "#/$defs/FactoryResetHosted"
                                },
                                "propertyName": "subtype"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/$defs/FactoryResetOnOff"
                                },
                                {
                                    "$ref": "#/$defs/FactoryResetLongPress"
                                },
                                {
                                    "$ref": "#/$defs/FactoryResetHosted"
                                }
                            ],
                            "title": "Factory Reset"
                        },
                        "ezc.product_common.forced_rollback": "#/$defs/ForcedRollback",
                        "ezc.product_common.indicator": {
                            "discriminator": {
                                "mapping": {
                                    "0": "#/$defs/IndicatorNonHosted",
                                    "1": "#/$defs/IndicatorHosted"
                                },
                                "propertyName": "subtype"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/$defs/IndicatorNonHosted"
                                },
                                {
                                    "$ref": "#/$defs/IndicatorHosted"
                                }
                            ]
                        },
                        "ezc.product_common.light_config": "#/$defs/LightConfig",
                        "ezc.product_common.socket_config": "#/$defs/SocketConfig",
                        "ezc.product_common.socket_input_mode": "#/$defs/SocketInputMode",
                        "ezc.product_common.socket_power": "#/$defs/SocketPower",
                        "ezc.product_common.temp_protect": "#/$defs/TempProtect",
                        "ezc.product_common.window_covering_calibration": "#/$defs/WindowCoveringCalibration",
                        "ezc.product_common.window_covering_config": "#/$defs/WindowCoveringConfig",
                        "ezc.product_common.zero_detect": "#/$defs/ZeroDetect"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "discriminator": {
                            "mapping": {
                                "0": "#/$defs/IndicatorNonHosted",
                                "1": "#/$defs/IndicatorHosted"
                            },
                            "propertyName": "subtype"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/IndicatorNonHosted"
                            },
                            {
                                "$ref": "#/$defs/IndicatorHosted"
                            }
                        ]
                    },
                    {
                        "$ref": "#/$defs/BackLight"
                    },
                    {
                        "$ref": "#/$defs/LightConfig"
                    },
                    {
                        "discriminator": {
                            "mapping": {
                                "1": "#/$defs/FactoryResetOnOff",
                                "2": "#/$defs/FactoryResetLongPress",
                                "3": "#/$defs/FactoryResetHosted"
                            },
                            "propertyName": "subtype"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/FactoryResetOnOff"
                            },
                            {
                                "$ref": "#/$defs/FactoryResetLongPress"
                            },
                            {
                                "$ref": "#/$defs/FactoryResetHosted"
                            }
                        ],
                        "title": "Factory Reset"
                    },
                    {
                        "$ref": "#/$defs/ForcedRollback"
                    },
                    {
                        "$ref": "#/$defs/SocketInputMode"
                    },
                    {
                        "$ref": "#/$defs/SocketPower"
                    },
                    {
                        "$ref": "#/$defs/SocketConfig"
                    },
                    {
                        "$ref": "#/$defs/WindowCoveringCalibration"
                    },
                    {
                        "$ref": "#/$defs/WindowCoveringConfig"
                    },
                    {
                        "$ref": "#/$defs/AdvertiseMac"
                    },
                    {
                        "$ref": "#/$defs/ZeroDetect"
                    },
                    {
                        "$ref": "#/$defs/TempProtect"
                    }
                ]
            },
            "minItems": 1,
            "title": "Product Common",
            "type": "array",
            "uniqueItems": true
        },
        "product": {
            "description": "Product specifications and configurations",
            "items": {
                "discriminator": {
                    "mapping": {
                        "ezc.product.light": {
                            "discriminator": {
                                "mapping": {
                                    "1": "#/$defs/LightOnOff",
                                    "2": "#/$defs/LightDimmable",
                                    "3": "#/$defs/LightTemperature",
                                    "4": "#/$defs/LightTemperatureColor",
                                    "5": "#/$defs/LightTempExtendColor"
                                },
                                "propertyName": "subtype"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/$defs/LightOnOff"
                                },
                                {
                                    "$ref": "#/$defs/LightDimmable"
                                },
                                {
                                    "$ref": "#/$defs/LightTemperature"
                                },
                                {
                                    "$ref": "#/$defs/LightTemperatureColor"
                                },
                                {
                                    "$ref": "#/$defs/LightTempExtendColor"
                                }
                            ]
                        },
                        "ezc.product.socket": {
                            "discriminator": {
                                "mapping": {
                                    "1": "#/$defs/SocketOnOff",
                                    "2": "#/$defs/SocketDimmable"
                                },
                                "propertyName": "subtype"
                            },
                            "oneOf": [
                                {
                                    "$ref": "#/$defs/SocketOnOff"
                                },
                                {
                                    "$ref": "#/$defs/SocketDimmable"
                                }
                            ]
                        },
                        "ezc.product.switch": "#/$defs/Switch",
                        "ezc.product.window_covering": "#/$defs/WindowCovering"
                    },
                    "propertyName": "type"
                },
                "oneOf": [
                    {
                        "discriminator": {
                            "mapping": {
                                "1": "#/$defs/LightOnOff",
                                "2": "#/$defs/LightDimmable",
                                "3": "#/$defs/LightTemperature",
                                "4": "#/$defs/LightTemperatureColor",
                                "5": "#/$defs/LightTempExtendColor"
                            },
                            "propertyName": "subtype"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/LightOnOff"
                            },
                            {
                                "$ref": "#/$defs/LightDimmable"
                            },
                            {
                                "$ref": "#/$defs/LightTemperature"
                            },
                            {
                                "$ref": "#/$defs/LightTemperatureColor"
                            },
                            {
                                "$ref": "#/$defs/LightTempExtendColor"
                            }
                        ]
                    },
                    {
                        "discriminator": {
                            "mapping": {
                                "1": "#/$defs/SocketOnOff",
                                "2": "#/$defs/SocketDimmable"
                            },
                            "propertyName": "subtype"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/SocketOnOff"
                            },
                            {
                                "$ref": "#/$defs/SocketDimmable"
                            }
                        ]
                    },
                    {
                        "$ref": "#/$defs/Switch"
                    },
                    {
                        "$ref": "#/$defs/WindowCovering"
                    }
                ]
            },
            "minItems": 1,
            "title": "Product",
            "type": "array",
            "uniqueItems": true
        },
        "test_mode": {
            "anyOf": [
                {
                    "items": {
                        "discriminator": {
                            "mapping": {
                                "ezc.test_mode.ble": "#/$defs/TestModeBLE",
                                "ezc.test_mode.common": "#/$defs/TestModeCommon",
                                "ezc.test_mode.light": "#/$defs/TestModeLight",
                                "ezc.test_mode.sniffer": "#/$defs/TestModeSniffer",
                                "ezc.test_mode.socket": "#/$defs/TestModeSocket",
                                "ezc.test_mode.window_covering": "#/$defs/TestModeWindowCovering"
                            },
                            "propertyName": "type"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/TestModeCommon"
                            },
                            {
                                "$ref": "#/$defs/TestModeBLE"
                            },
                            {
                                "$ref": "#/$defs/TestModeSniffer"
                            },
                            {
                                "$ref": "#/$defs/TestModeLight"
                            },
                            {
                                "$ref": "#/$defs/TestModeSocket"
                            },
                            {
                                "$ref": "#/$defs/TestModeWindowCovering"
                            }
                        ]
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true
                },
                {
                    "type": "null"
                }
            ],
            "default": null,
            "description": "Testing configurations",
            "title": "Test Mode"
        },
        "device_management": {
            "anyOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "null"
                }
            ],
            "default": null,
            "description": "Device Managmenet description",
            "title": "Device Management"
        }
    },
    "required": [
        "config_version",
        "driver",
        "product_common",
        "product"
    ],
    "title": "ZeroCode Product Configuration",
    "type": "object"
}